"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[2616],{4157:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"enseirb/s7/poo/2","title":"Objet et encapsulation - Les objets","description":"D\xe9finition : L\'objet est l\'entit de base de l\'ex\xe9cution. \xc0 chaque objet est attribu une","source":"@site/docs/enseirb/s7/poo/2.md","sourceDirName":"enseirb/s7/poo","slug":"/enseirb/s7/poo/2","permalink":"/pr-preview/pr-14/docs/enseirb/s7/poo/2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Objet et encapsulation - Les objets"},"sidebar":"tutorialSidebar","previous":{"title":"Objet et encapsulation - Encapsulation","permalink":"/pr-preview/pr-14/docs/enseirb/s7/poo/1"},"next":{"title":"Objet et encapsulation - Les classes","permalink":"/pr-preview/pr-14/docs/enseirb/s7/poo/3"}}');var a=s(74848),r=s(28453);const i={title:"Objet et encapsulation - Les objets"},o=void 0,l={},c=[{value:"Instanciation",id:"instanciation",level:2},{value:"Affectation dans une variable",id:"affectation-dans-une-variable",level:3},{value:"Envoi de messages",id:"envoi-de-messages",level:2},{value:"Construire une encapsulation",id:"construire-une-encapsulation",level:2},{value:"Encapsulation et masquage d&#39;information",id:"encapsulation-et-masquage-dinformation",level:3},{value:"Objet constant",id:"objet-constant",level:3},{value:"Communication entre objets",id:"communication-entre-objets",level:3},{value:"Des traitements applicables \xe0 toutes les encapsulations",id:"des-traitements-applicables-\xe0-toutes-les-encapsulations",level:3}];function d(e){const n={code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition"})," : L'",(0,a.jsx)(n.strong,{children:"objet"})," est l'entit de base de l'ex\xe9cution. \xc0 chaque objet est attribu une\nzone m\xe9moire diff\xe9rente."]}),"\n",(0,a.jsx)(n.p,{children:"Plusieurs objets mettant en oeuvre la m\xeame encapsulation, il est n\xe9cessaire\nd'identifier de mani\xe8re unique un objet."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition"})," : L'",(0,a.jsx)(n.strong,{children:"identit\xe9"})," d'un objet est assur\xe9e par l'adresse de la zone m\xe9moire attribu\xe9e \xe0\ncet objet."]}),"\n",(0,a.jsx)(n.p,{children:"La zone m\xe9moire d'un objet contient la valeur de ses attributs (suivant la\ndescription de l'encapsulation).\nUn objet encapsule les m\xe9thodes. En pratique, tous les objets mettant en oeuvre\nla m\xeame encapsulation partagent le code des m\xe9thodes. Ce code commun est ex\xe9cut\xe9\navec l'identit\xe9 (la zone m\xe9moire) de l'objet sur lequel est d\xe9clench\xe9e une\naction."}),"\n",(0,a.jsx)(n.p,{children:"Un langage orient\xe9 objet doit fournir des m\xe9canismes pour :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["cr\xe9er un objet : ",(0,a.jsx)(n.strong,{children:"instanciation"})]}),"\n",(0,a.jsxs)(n.li,{children:["d\xe9clencher une action sur un objet : ",(0,a.jsx)(n.strong,{children:"envoi de messages"})]}),"\n",(0,a.jsxs)(n.li,{children:["assurer la s\xe9paration utilisation/ r\xe9alisation : ",(0,a.jsx)(n.strong,{children:"masquage d'information"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"instanciation",children:"Instanciation"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition"})," : L'",(0,a.jsx)(n.strong,{children:"instanciation"})," d\xe9signe l'op\xe9ration de cr\xe9er un objet \xe0 partir de la\ndescription de l'encapsulation. Elle attribue une zone m\xe9moire \xe0 l'objet et\ninitialise ses attributs."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition"})," : Dans un langage \xe0 classe, un objet est instanci\xe9 \xe0 partir d'une classe. Un objet\nest souvent d\xe9sign\xe9 par le terme ",(0,a.jsx)(n.strong,{children:"instance"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Pour respecter l'encapsulation, la classe fournit le code d'initialisation par\nl'interm\xe9diaire d'un traitement appel\xe9 ",(0,a.jsx)(n.em,{children:"constructeur"}),". Comme une m\xe9thode, un\nconstructeur admet une liste de param\xe8tres.\nEn Java, l'instanciation est une expression atomique construire \xe0 partir de\nl'op\xe9rateur ",(0,a.jsx)(n.code,{children:"new"})," et d'un constructeur de la classe."]}),"\n",(0,a.jsxs)(n.p,{children:["Le constructeur dans la classe ",(0,a.jsx)(n.code,{children:"PorteCharniere"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class PorteCharniere{\n  //La d\xe9finition d'un constructeur\n  PorteCharniere(){\n    estFerme = false;\n    //...\n  }\n\n  //La d\xe9finition des variables/attributs\n  boolean estFerme;\n\n  //La d\xe9finition des m\xe9thodes\n  void fermer(){\n    //...\n    estFerme=true;\n  }\n\n  void ouvrir(){\n    //...\n    estFerme=false;\n  }\n\n  boolean estFerme(){\n    rrturn estFerme;\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"affectation-dans-une-variable",children:"Affectation dans une variable"}),"\n",(0,a.jsxs)(n.p,{children:["Comme habituellement dans le code, les variables / param\xe8tres (de m\xe9thode) vont\npermettre de manipuler les objets / instances.\nDans un langage typ\xe9, le compilateur v\xe9rifie la compatibilit\xe9 des types entre le\ntype de la variable / param\xe8tre et l'instance affect\xe9e \xe0 cette variable.\nUne variable de type ",(0,a.jsx)(n.code,{children:"PorteCharniere"})," contient une instance de la classe\n",(0,a.jsx)(n.code,{children:"PorteCharniere"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"PorteCharniere sesame;\nsesame = new PorteCharniere();\nPortecharniere paradis = new Portecharniere();\nsesame = new Portecharniere();\nparadis = sesame;\nTelecommande maTelecommande = new Telecommande(3);\nmaTelecommande = sesame; // erreur type non compatible\n"})}),"\n",(0,a.jsxs)(n.p,{children:["En Java, les variables / param\xe8tres correspondant \xe0 des objets sont des\nr\xe9f\xe9rences. La variable ",(0,a.jsx)(n.code,{children:"paradis"})," contient l'adresse d'un objet. La lib\xe9ration\nde la zone m\xe9moire d'un objet est prise en charge par le ramasse miettes de la\nmachine virtuelle de Java (\"jvm\")"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Les variables des type de base (comme ",(0,a.jsx)(n.code,{children:"int, float, boolean, byte, char"}),")\ncontiennent des valeurs. Les comportements entre type de base et type r\xe9f\xe9rence\nsont diff\xe9rents dans l'affectation et le passage de param\xe8tres."]}),"\n",(0,a.jsxs)(n.li,{children:["Les cha\xeenes de\ncaract\xe8res constantes sont des instances de la classe ",(0,a.jsx)(n.code,{children:"String"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Les tableaux\nJava sont des objets avec des m\xe9thodes d'acc\xe8s et poss\xe8de l'attribut de\nlongueur."}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Le constructeur dans la classe ",(0,a.jsx)(n.code,{children:"Telecommande"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class Telecommande {\n    int nbPortes;\n    Portecharniere[] mesPortes;\n\n    Telecommande(int capacite) {\n        nbPortes = 0;\n        mesPortes = new PorteCharni\xe8re [capacite];\n    }\n    voir positionner(Portecharniere p){\n        mesPortes[nbPortes]=p;\n        nbPortes++;\n        /* Todo depassement */\n    }\n    void activer(int numero){\n        /*Todo*/\n    }\n    void desactiver(int numero){\n        /*Todo*/\n    }\n    void desactiverTout(){\n        /*Todo*/\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Pour respecter l'encapsulation, le code du constructeur doit s'assurer\nd'initiliser les attributs avec des valeurs coh\xe9rentes par rapport \xe0\nl'encapsulation. Sinon les futures actions d\xe9clench\xe9es sur l'objet ne\nrespecteront pas le service propos\xe9 par l'encapsulation. Le cas le plus fr\xe9quent\nest une valeur invalide par les param\xe8tres du constructeur. Les actions d'une\ninstance de t\xe9l\xe9commande sont elles coh\xe9rentes avec le service de\nl'encapsulation si la valeur du param\xe8tre d'initialisation est \xe9gale \xe0 z\xe9ro ?"}),"\n",(0,a.jsx)(n.h2,{id:"envoi-de-messages",children:"Envoi de messages"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition"})," : Un ",(0,a.jsx)(n.strong,{children:"message"})," est form\xe9 d'un nom et d'une liste de valeur de param\xe8tres (cette\nliste peut \xeatre vide). \xc0 la r\xe9ception d'un message, l'objet fait la\ncorrespondant entre le message et l'action \xe0 d\xe9clencher."]}),"\n",(0,a.jsx)(n.p,{children:"La notion d'envoi de messages cherche \xe0 abstraire la mani\xe8re dont est choisie\nl'action. Un m\xeame message peut d\xe9clencher des actions diff\xe9rentes sur des\nencapsulations diff\xe9rentes : Quel est le code d\xe9clench\xe9 par l'appel \xe0 une\nm\xe9thode ? Est-ce un acc\xe8s \xe0 un attribut ou l'appel \xe0 une m\xe9thode ? en g\xe9n\xe9ral la\nnotation point\xe9e est utilis\xe9e pour indiquer l'envoie du'n message \xe0 un objet.\nL'envoi du message s'\xe9crit en utilisant la variable qui r\xe9f\xe9rence l'objet.\nEnvoie de messages avec les variables de l'exemple pr\xe9c\xe9dent :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"// appel d'un traitement\nparadis.fermer();\nsesame.ouvrir();\nsesame.estFerme();\nmaTelecommande.positionner(sesame);\nmaTelecommande.activer(1);\nmaTelecommande.desactiver(2);\nmaTelecommande.desactivertout();\n// acc\xe8s \xe0 un attribut\nsesame.estFerme = true;\nmaTelecommande.mesPortes[1].estFerme = false;\nmaTelecommande.mesPortes[1].ouvrir();\n"})}),"\n",(0,a.jsx)(n.p,{children:"En java, l'abstraction n'est pas compl\xe8te car la syntaxe est diff\xe9rente entre un\nattribut et un m\xe9thode. C'est au moment de l'ex\xe9cution que l'envoi de messages\nest r\xe9alis\xe9. Le message est transmis \xe0 l'objet r\xe9f\xe9renc\xe9 par la variable. Du\ncoup, la java ne peut pas v\xe9rifier l'existence d'un message sur un objet.\nLa seule v\xe9rification possible est par rapport au type de la variable."}),"\n",(0,a.jsx)(n.h2,{id:"construire-une-encapsulation",children:"Construire une encapsulation"}),"\n",(0,a.jsx)(n.h3,{id:"encapsulation-et-masquage-dinformation",children:"Encapsulation et masquage d'information"}),"\n",(0,a.jsx)(n.p,{children:"Un objet met en oeuvre une encapsulation, il y a donc abstraction sur la\nr\xe9alisation de l'objet. Pour permettre de changer cette r\xe9alisation sans\nmodifier le code utilisant cet objet (code client), nous cherchons \xe0 masquer\nl'information sur la r\xe9alisation au coude client. Les d\xe9tails de la r\xe9alisation\nd'un objet doivent \xeatre visible le moins possible. Dans un langage \xe0 classe, ce\nmasque d'information est d\xe9fini au niveau de la classe avec le m\xe9canisme de\nport\xe9e des identificateurs. De base, deux port\xe9es sont n\xe9cessaires pour s\xe9parer\nutilisation et r\xe9alisation :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"port\xe9e publique, l'identificateur est accessible par un code \xe9crit en dehors\nde la classe"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"port\xe9e priv\xe9e, l'identificateur est accessible uniquemeent par le code contenu\ndans la classe"}),"\n",(0,a.jsxs)(n.p,{children:["Dans le code de la classe ",(0,a.jsx)(n.code,{children:"Telecommande"}),", l'instruction\n",(0,a.jsx)(n.code,{children:"mesPortes[i].estFerme"})," ne respecte pas l'encapsulation. La d\xe9finition de\nl'attribut risque de changer :"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"le choix de stocker la valeur plut\xf4t que la calculer"}),"\n",(0,a.jsx)(n.li,{children:"le choix de son type ou de la signification de sa valeur"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Le choix de d\xe9finir un attribut est une d\xe9cision de r\xe9alisation."}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition"})," : Le principe de masquage des attributs : Afin de respecter l'encapsulation, tous les attributs d'un objet doivent \xeatre\nd\xe9clar\xe9s priv\xe9s et seules les m\xe9thodes peuvent \xeatre d\xe9clar\xe9es publiques."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class Telecommande {\n    private int nbPortes;\n    private PorteCharniere[] mesPortes;\n\n    public Telecommande(int capacite){\n        nbPortes = 0;\n        mesPortes = new Portecharniere[capacite];\n    }\n\n    public boolean estRempli ( ) {\n    return mesPortes . length <= nbPortes ;\n    }\n    public void positionner ( PorteCharniere p ) {\n    i f ( mesPortes . length <= nbPortes )\n    return ; /* Todo erreur de depassement */\n    mesPortes [ nbPortes ] = p ;\n    nbPortes ++;\n    }\n    public void activer ( int numero ) {\n    mesPortes [numero ] . ouvr ir ( ) ;\n    }\n    public void desactiver ( int numero ) {\n    mesPortes [numero ] . fermer ( ) ;\n    }\n    public void desactiverTout ( ) {\n    for ( int i = 0 ; i < nbPortes ; i ++ )\n    if ( ! mesPortes [ i ] . estFerme ( ) )\n    mesPortes[i].fermer();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"objet-constant",children:"Objet constant"}),"\n",(0,a.jsxs)(n.p,{children:["Un objet poss\xe8de un \xe9tat d\xe9fini \xe0 partir des valeurs contenues dans l\u2019ensemble\nde ses attributs. Un objet est constant si son \xe9tat ne peut-\xeatre modifi\xe9.\nEn Java, un objet est constant que si aucune de ses m\xe9thodes ne modifie son\n\xe9tat : exemple dans l\u2019A.P.I standard Java, la diff\xe9rence entre les instances de la\nclasse ",(0,a.jsx)(n.code,{children:"String"}),"  et les instances de la classe StringBuffer. Cette encapsulation des\ncha\xeenes constantes montre l\u2019utilisation habituelle des objets constants en Java : le\npartage d\u2019objets."]}),"\n",(0,a.jsx)(n.h3,{id:"communication-entre-objets",children:"Communication entre objets"}),"\n",(0,a.jsxs)(n.p,{children:["Un objet est passif. Il d\xe9clenche des actions uniquement en r\xe9ponse \xe0 des\nsollicitations d'autres objets. Prenons le cas o\xf9 un objet ",(0,a.jsx)(n.code,{children:"t"})," (instance de la\nclasse ",(0,a.jsx)(n.code,{children:"Petit"}),") doit envoyer le message ",(0,a.jsx)(n.code,{children:"voler"})," \xe0 un objet ",(0,a.jsx)(n.code,{children:"r"})," (instance de la\nclasse ",(0,a.jsx)(n.code,{children:"Coeur"}),")."]}),"\n",(0,a.jsxs)(n.p,{children:["Pour communiquer, l'objet ",(0,a.jsx)(n.code,{children:"t"})," doit poss\xe9der une r\xe9f\xe9rence sur l'objet ",(0,a.jsx)(n.code,{children:"r"})," au\nmoins au moment de l'ex\xe9cution de l'envoi du message. La solution directe est de\nstocker cette r\xe9f\xe9rence dans les attributs de l'objet ",(0,a.jsx)(n.code,{children:"t"}),"; l'objet ",(0,a.jsx)(n.code,{children:"t"}),' "a un"\nobjet ',(0,a.jsx)(n.code,{children:"r"}),". La classe ",(0,a.jsx)(n.code,{children:"Petit"})," doit d\xe9clarer un attribut / une variable d'instance\nde type ",(0,a.jsx)(n.code,{children:"Coeur"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition"})," : Le lien ",(0,a.jsx)(n.code,{children:'"a-un"'})," entre deux classes. Une classe ",(0,a.jsx)(n.code,{children:"P"}),' poss\xe8de un lien "a un" avec\nune classe ',(0,a.jsx)(n.code,{children:"R"})," si elle d\xe9finit un attribut de type ",(0,a.jsx)(n.code,{children:"R"}),". Une instance de ",(0,a.jsx)(n.code,{children:"P"}),"\nposs\xe8de dans ses attributs une instance de ",(0,a.jsx)(n.code,{children:"R"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Le lien \"a-un\" ne fixe pas la mani\xe8re d'obtenir la r\xe9f\xe9rence stock\xe9e dans\nl'attribut : instanciation de la classe Coeur dans le constructeur de la classe\n",(0,a.jsx)(n.code,{children:"Petit"})," ou passage de la r\xe9f\xe9rence comme param\xe8tre d'un constructeur ou d'une\nm\xe9thode de la classe ",(0,a.jsx)(n.code,{children:"Petit"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:['Le lien "a-un" dans la classe ',(0,a.jsx)(n.code,{children:"Telecommande"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class Telecommande{\n  int nbPortes ;\n  PorteCharniere[] mesPortes ;\n  Telecommande(int capacite){\n    nbPortes = 0;\n    mesPortes = new PorteCharniere[capacite];\n  }\n\n  void positionner(PorteCharniere p){\n    if(nbPortes >= mesPortes.length)\n      return; /* Todo erreur de depassement */\n    mesPortes[nbPortes] = p ;\n    nbPortes ++;\n  }\n  void activer(int numero) {\n    mesPortes[numero].ouvrir();\n  }\n  void desactiver(int numero){\n    mesPortes[numero].fermer();\n  }\n  void desactiverTout(){\n    for(int i = 0 ; i < nbPortes ; i++)\n      if(!mesPortes[i].estFerme)\n        mesPortes[i].fermer();\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"des-traitements-applicables-\xe0-toutes-les-encapsulations",children:"Des traitements applicables \xe0 toutes les encapsulations"}),"\n",(0,a.jsx)(n.p,{children:"Dans la pratique, il existe un petit nombre de traitements particuliers qui\npeuvent s'appliquer \xe0 tous les objets. Voici les plus fr\xe9quents  :"}),"\n",(0,a.jsxs)(n.p,{children:["Pour v\xe9rifier l'\xe9galit\xe9 entre deux instances de la m\xeame classe. L'op\xe9rateur Java\n",(0,a.jsx)(n.code,{children:"=="})," indique l'\xe9galit\xe9 de r\xe9f\xe9rences (c'est la m\xeame instance). Mais deux\ninstances diff\xe9rentes peuvent \xeatre consid\xe9r\xe9es comme \xe9gales par rapport \xe0 la\nvaleur de leurs attributs. C'est l'objectif de la m\xe9thode ",(0,a.jsx)(n.code,{children:"equals()"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Pour copier ou cloner un objet. Le passage d'un param\xe8tre objet se fait\nexclusiement par r\xe9f\xe9rence / adresse. Pour \xe9viter un effet de bord, il est donc\nparfois n\xe9cessaire d'effectuer une copie d'un objet. C'est l'objectif de la\nm\xe9thode ",(0,a.jsx)(n.code,{children:"clone()"}),"."]}),"\n",(0,a.jsxs)(n.p,{children:["Le langage Java regroupe ces m\xe9thodes particuli\xe8res dans la classe ",(0,a.jsx)(n.code,{children:"Object"}),". Ces\nm\xe9thodes sont d\xe9finies avec un traitement par d\xe9faut qu'il faut adapter \xe0 chaque\nclasse : par exemple, la m\xe9thode ",(0,a.jsx)(n.code,{children:"equals()"})," a pour traitement par d\xe9faut\nl'\xe9galit\xe9 de r\xe9f\xe9rence."]}),"\n",(0,a.jsxs)(n.p,{children:["Dans la classe ",(0,a.jsx)(n.code,{children:"Object"})," nous trouvons la m\xe9thode ",(0,a.jsx)(n.code,{children:"toString()"}),". Elle retourne une\ncha\xeene de caract\xe8re qui va permettre de tracer, par exemple, la valeur des\nattributs d'un objet. Son code par d\xe9faut retourne une cha\xeene correspondant \xe0\nl'identit\xe9 de l'objet."]}),"\n",(0,a.jsxs)(n.p,{children:["Voici une mani\xe8re d'\xe9crire son code dans la classe ",(0,a.jsx)(n.code,{children:"Telcommande"})," pour tracer la\nvaleur de deux attributs"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'public String toString(){\n  return "<nbPorte:" + nbPortes + ", capacite :" + mesPortes.length + \'>\';\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>o});var t=s(96540);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);