"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[9750],{21877:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"enseirb/s7/poo/7","title":"Substitution d\'objets - Hi\xe9rarchie de classes","description":"La hi\xe9rarchie de classes correspond \xe0 une hi\xe9rarchie de type / sous type entre","source":"@site/docs/enseirb/s7/poo/7.md","sourceDirName":"enseirb/s7/poo","slug":"/enseirb/s7/poo/7","permalink":"/pr-preview/pr-17/docs/enseirb/s7/poo/7","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Substitution d\'objets - Hi\xe9rarchie de classes"},"sidebar":"tutorialSidebar","previous":{"title":"Substitution d\'objets - La substitution d\'objets ou polymorphisme","permalink":"/pr-preview/pr-17/docs/enseirb/s7/poo/5"},"next":{"title":"Autres m\xe9canismes (non objet) - Le M\xe9canisme des exceptions","permalink":"/pr-preview/pr-17/docs/enseirb/s7/poo/8"}}');var a=s(74848),i=s(28453);const t={title:"Substitution d'objets - Hi\xe9rarchie de classes"},l=void 0,c={},d=[{value:"L&#39;h\xe9ritage ou lien &quot;est-un&quot;",id:"lh\xe9ritage-ou-lien-est-un",level:2},{value:"Lien &quot;est-un&quot;",id:"lien-est-un",level:3},{value:"En Java",id:"en-java",level:3},{value:"H\xe9ritages d&#39;interfaces",id:"h\xe9ritages-dinterfaces",level:2},{value:"H\xe9ritage entre une classe et des interfaces",id:"h\xe9ritage-entre-une-classe-et-des-interfaces",level:3},{value:"H\xe9ritage entre interfaces",id:"h\xe9ritage-entre-interfaces",level:3},{value:"H\xe9ritage entre classes",id:"h\xe9ritage-entre-classes",level:2},{value:"D\xe9finition d&#39;une classe avec r\xe9alisation",id:"d\xe9finition-dune-classe-avec-r\xe9alisation",level:3},{value:"Acc\xe8s pour les classes d\xe9riv\xe9es",id:"acc\xe8s-pour-les-classes-d\xe9riv\xe9es",level:3},{value:"Variable h\xe9rit\xe9e",id:"variable-h\xe9rit\xe9e",level:3},{value:"Constructeur",id:"constructeur",level:3},{value:"M\xe9thode h\xe9rit\xe9e",id:"m\xe9thode-h\xe9rit\xe9e",level:3},{value:"Le m\xe9canisme de red\xe9finition des m\xe9thodes d&#39;instance",id:"le-m\xe9canisme-de-red\xe9finition-des-m\xe9thodes-dinstance",level:2},{value:"Retour sur le polymorphisme",id:"retour-sur-le-polymorphisme",level:3},{value:"Au sujet des m\xe9thodes de classe",id:"au-sujet-des-m\xe9thodes-de-classe",level:4},{value:"Classe abstraite",id:"classe-abstraite",level:2},{value:"Factoriser la m\xe9thode <code>envoyerCommande()</code>",id:"factoriser-la-m\xe9thode-envoyercommande",level:3},{value:"Factoriser le traitement du verrou",id:"factoriser-le-traitement-du-verrou",level:3},{value:"Substitution d&#39;objets et factorisation de code",id:"substitution-dobjets-et-factorisation-de-code",level:2},{value:"H\xe9ritage multiple et choix des membres h\xe9rit\xe9s",id:"h\xe9ritage-multiple-et-choix-des-membres-h\xe9rit\xe9s",level:2},{value:"Les interfaces en Java 8",id:"les-interfaces-en-java-8",level:3}];function o(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"La hi\xe9rarchie de classes correspond \xe0 une hi\xe9rarchie de type / sous type entre\nclasses. Elle organise les trois cat\xe9gories de classe : concr\xe8te, abstraite et\nabstraite pure. La construction de cette hi\xe9rarchie se fait au travers du\nm\xe9canisme d'h\xe9ritage."}),"\n",(0,a.jsx)(n.h2,{id:"lh\xe9ritage-ou-lien-est-un",children:'L\'h\xe9ritage ou lien "est-un"'}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"D\xe9finition :"})," Le m\xe9canisme d'h\xe9ritage inclut dans la construction d'une\nclasse les informations de la construction/ d\xe9finition d'une autre classe\n(existante)."]}),"\n",(0,a.jsx)(n.p,{children:"Si une classe D h\xe9rite d'une classe B, la d\xe9finition de la classe D inclut\nautomatiquement le prototype des m\xe9thodes (d'instance et de classe) et la\nr\xe9alisation (code des m\xe9thodes, variables) de la classe B."}),"\n",(0,a.jsx)(n.p,{children:'Toutes les modifications de la classe B se r\xe9percutent sur la classe B. La\nclasse D est appel\xe9e "classe d\xe9riv\xe9e", "sous-classe", "classe fille" et la\nclasse B est appel\xe9e "classe de base", "classe m\xe8re".'}),"\n",(0,a.jsx)(n.p,{children:"On distingue le m\xe9canisme d'h\xe9ritage en :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"H\xe9ritage simple"})," si le m\xe9canisme n'accepte qu'une seule classe de base\ndirecte. La hi\xe9rarchie correspond \xe0 un arbre avec une seule racine."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"H\xe9ritage multiple"})," si le m\xe9canisme accepte plusieurs classes de base\ndirectes. La hi\xe9rarchie correspond \xe0 une for\xeat avec plusieurs racines."]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"lien-est-un",children:'Lien "est-un"'}),"\n",(0,a.jsx)(n.p,{children:'L\'h\xe9ritage est un lien entre classe/type nomm\xe9 dans le cours "est-un" ("is-a").\nD h\xe9rite de B ou D est un B. Il y a au moins deux aspects \xe0 consid\xe9rer avec le\nlien "est-un".'}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"La relation de type/sous-type"})," : La nouvelle classe inclut le prototype (et\nla sp\xe9cification) des m\xe9thodes de l'ensemble des classes impliqu\xe9es dans la\nhi\xe9rarchie d'h\xe9ritage. Le m\xe9canisme d'h\xe9ritage d\xe9finit une relation de\ntype/sous-type. L'int\xe9r\xeat est de permettre la substitution d'objets. C'est une\npropri\xe9t\xe9 pour le client de la hi\xe9rarchie."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"R\xe9utilisation de la r\xe9alisation"})," : La nouvelle classe inclut la r\xe9alisation\n(corps des m\xe9thodes et variables) de l'ensemble des classes impliqu\xe9es dans la\nhi\xe9rarchie des m\xe9thodes et variables) de l'ensemble des classes impliqu\xe9es\ndans la hi\xe9rarchiser d'h\xe9ritage. L'int\xe9r\xeat est de permettre de factoriser du\ncode. C'est une propri\xe9t\xe9 pour le d\xe9veloppeur."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Ces deux aspects ne sont pas forc\xe9ment li\xe9s. Mais, en g\xe9n\xe9ral, le m\xe9canisme\nd'h\xe9ritage ne les distingue pas. Il faut les g\xe9rer en m\xeame temps ce qui peut\nintroduire des incoh\xe9rences dans la hi\xe9rarchie de classes. La hi\xe9rarchie doit\nplut\xf4t mettre l'accent sur la relation de type/sous-type."}),"\n",(0,a.jsx)(n.h3,{id:"en-java",children:"En Java"}),"\n",(0,a.jsx)(n.p,{children:"Dans la construction d'une classe, le langage Java s\xe9pare une classe avec\nr\xe9alisation et une classe sans r\xe9alisation. Du coup, le lien \"est-un\" correspond\n\xe0 trois m\xe9canismes d'h\xe9ritages :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"l'h\xe9ritage entre une classe et des interfaces"}),"\n",(0,a.jsx)(n.li,{children:"l'h\xe9ritage entre interfaces"}),"\n",(0,a.jsx)(n.li,{children:"l'h\xe9ritage entre classes"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"h\xe9ritages-dinterfaces",children:"H\xe9ritages d'interfaces"}),"\n",(0,a.jsx)(n.p,{children:"C'est un m\xe9canisme d'h\xe9ritage multiple"}),"\n",(0,a.jsx)(n.h3,{id:"h\xe9ritage-entre-une-classe-et-des-interfaces",children:"H\xe9ritage entre une classe et des interfaces"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"[public][abstract] class NomClasse implements UneInterface, UneAutreInterface{\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Le mot-cl\xe9 ",(0,a.jsx)(n.code,{children:"implements"})," indique que la nouvelle classe correspond \xe0 une\nr\xe9alisation des diff\xe9rentes interfaces de la liste."]}),"\n",(0,a.jsx)(n.h3,{id:"h\xe9ritage-entre-interfaces",children:"H\xe9ritage entre interfaces"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"[public] interface NomInterface extends UneInterface, UneAutreInterface{\n\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:['La nouvelle interface "inclut" toutes les d\xe9clarations contenues dans les\ninterfaces sp\xe9cifi\xe9es par le mot-cl\xe9 ',(0,a.jsx)(n.code,{children:"extends"}),". Ce lien \"est-un\" permet \xe0 une\ninterface d'\xe9tendre ou de r\xe9unir des fonctionnalit\xe9s d'autres interfaces."]}),"\n",(0,a.jsx)(n.h2,{id:"h\xe9ritage-entre-classes",children:"H\xe9ritage entre classes"}),"\n",(0,a.jsxs)(n.p,{children:["Le mot-cl\xe9 ",(0,a.jsx)(n.code,{children:"extends"})," d\xe9finit la relation d'h\xe9ritage entre deux classes. C'est un\nh\xe9ritage simple avec comme racine la classe ",(0,a.jsx)(n.code,{children:"java.lang.Object"}),". Une m\xeame classe\npeut avoir un h\xe9ritage simple sur une construction ",(0,a.jsx)(n.code,{children:"class"})," et un h\xe9ritage\nmultiple sur des constructions ",(0,a.jsx)(n.code,{children:"interface"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"d\xe9finition-dune-classe-avec-r\xe9alisation",children:"D\xe9finition d'une classe avec r\xe9alisation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"[public] [abstract | final] class NomClasse [ extends UneClasse ] [ implements UneInterface , UneAutreInterface ] {\n// Membres: variables .\n[final][public | protected | private] type varInstance [= expression ];\nstatic\n[final][public | protected | private] type varClasse [= expression ];\n\n// Membres m\xe9thodes\n[final][public | protected | private]\ntypeRetour m\xe9thodeInstance ([ liste de param\xe8tres ])\n{\n// code\n}\nabstract [public | protected] typeRetour m\xe9thodeInstance ([ liste de param\xe8tres ]);\nstatic [final] [public | protected | private] typeRetour m\xe9thodeClasse ([ liste de param\xe8tres ])\n{\n// code\n}\n\n// Membres constructeurs .\n[public | protected | private] constructeur ([ liste de param\xe8tres ])\n{\n//code\n}\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Sans pr\xe9ence du mot-cl\xe9 ",(0,a.jsx)(n.code,{children:"extends"}),", une classe h\xe9rite par d\xe9faut de la classe\n",(0,a.jsx)(n.code,{children:"java.lang.Object"}),". La classe ",(0,a.jsx)(n.code,{children:"Object"})," contient des m\xe9thodes d'instance communes\n\xe0 tous les objets comme ",(0,a.jsx)(n.code,{children:"toString(), equals()"})," ou ",(0,a.jsx)(n.code,{children:"getClass()"})," le mot cl\xe9\n",(0,a.jsx)(n.code,{children:"final"})," devant une classe bloque l'h\xe9ritage. Cette classe n'admet pas de\nsous-classe. Le mot cl\xe9 ",(0,a.jsx)(n.code,{children:"abstract"})," devant une classe indique une classe\nabstraite c'est \xe0 dire non instanciable. Une classe abstraite admet forc\xe9ment\ndes sous-classes, elle ne peut pas \xeatre d\xe9clar\xe9e avec le mot cl\xe9 \"final\". Pour\nnotre cas d'\xe9cole : nous souhaitons ajouter un service de verrou \xe0\nl'encapsulation ",(0,a.jsx)(n.code,{children:"porte charni\xe8re"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package porte;\n\npublic class PorteVerrouCharniere extends PorteCharniere{\n    private boolean estVerrouille;\n    public PorteVerrouCharniere(){\n        estVerrouille=false;\n    }\n    public void verrouiller(){\n        estVerrouille=true;\n    }\n    public void deverrouiller(){\n        estVerrouille=false;\n    }\n    public boolean estVerouille(){\n        return estVerrouille;\n    }\n}\n\nPorteVerrouCharniere verrou = new PorteVerrouCharniere();\n\nverrou.fermer();\nverrou.estFerme();\nverrou.estVerrouille();\n"})}),"\n",(0,a.jsx)(n.p,{children:"Les membres d'une classe d\xe9riv\xe9e regroupent :"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"les variables, m\xe9thodes et constructeurs d\xe9finis dans la classe,"}),"\n",(0,a.jsx)(n.li,{children:"les membres h\xe9rit\xe9s (variables et m\xe9thodes) d\xe9finis dans les classes de base\n(directe ou indirecte)"}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"acc\xe8s-pour-les-classes-d\xe9riv\xe9es",children:"Acc\xe8s pour les classes d\xe9riv\xe9es"}),"\n",(0,a.jsxs)(n.p,{children:["Une classe d\xe9riv\xe9e ne fait pas forc\xe9ment partie du m\xeame paquetage que sa classe\nde base. Le modificateur d'acc\xe8s ",(0,a.jsx)(n.code,{children:"protected"})," permet un acc\xe8s pr\xe9f\xe9rentiel par\nclasses d\xe9riv\xe9es aux membres de la classe de base et aux classes du paquetage."]}),"\n",(0,a.jsxs)(n.p,{children:["Pour \xe9viter les d\xe9pendances de r\xe9alisation entre la classe de base et ses\nclasses d\xe9riv\xe9es, il est n\xe9cessaire de respecter l'encapsulation en \xe9vitant\nd'avoir des attributs en acc\xe8s ",(0,a.jsx)(n.code,{children:"protected"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"variable-h\xe9rit\xe9e",children:"Variable h\xe9rit\xe9e"}),"\n",(0,a.jsx)(n.p,{children:"Les variables h\xe9rit\xe9es d'une classe correspondent \xe0 l'ensemble des variables\nd'instance et des variables de classes d\xe9finies dans la hi\xe9rarchie de classes (\xe0\npartir de sa classe de base)."}),"\n",(0,a.jsx)(n.p,{children:"L'instanciation d'une classe d\xe9riv\xe9e cr\xe9e une seule zone m\xe9moire. Toutes les\nvariables d'instance h\xe9rit\xe9es (accessibles ou non) se trouvent dans cette zone\nm\xe9moire."}),"\n",(0,a.jsx)(n.p,{children:"Il n'est pas possible de modifier la d\xe9claration (type, port\xe9e) d'une variable\nh\xe9rit\xe9e."}),"\n",(0,a.jsx)(n.h3,{id:"constructeur",children:"Constructeur"}),"\n",(0,a.jsx)(n.p,{children:"Les constructeurs ne sont pas h\xe9rit\xe9s. Il faut syst\xe9matiquement les d\xe9finir dans\nla classe d\xe9riv\xe9e."}),"\n",(0,a.jsx)(n.p,{children:"L'instanciation d'une classe d\xe9riv\xe9 est valide uniquement si les attributs\nd\xe9finis par les classes de base sont initialis\xe9s. Les attributs d'une classe de\nbase sont initialis\xe9s avant ceux de la classe d\xe9riv\xe9e."}),"\n",(0,a.jsxs)(n.p,{children:["Le code du constructeurs de la classe d\xe9riv\xe9e ne peut s'ex\xe9cuter qu'apr\xe8s celui\ndu constructeur de la classe de base. Cette ordre d'initialisation impose un\ncha\xeenage d'appel des constructeurs des classes de base. En g\xe9n\xe9ral, le\nprogrammeur d\xe9clenche explicitement l'appel \xe0 un des constructeurs de la classe\nde base directe en utilisant l'instruction ",(0,a.jsx)(n.code,{children:"super()"}),". Le choix du constructeur\nse fait \xe0 partir du type des param\xe8tres (m\xe9canisme de surcharge). L'instruction\n",(0,a.jsx)(n.code,{children:"super()"})," doit se trouver ",(0,a.jsx)(n.strong,{children:"en premi\xe8re ligne du code"})," du constructeur."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"class PorteVerrouCoulissante extends PorteCoulissante{\n    //...\n    public PorteVerrouCoulissante(int pasMax){\n        super(pasMax);\n        //initialisation des attributs de la classe\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Lorsqu'il n'y a pas d'instruction ",(0,a.jsx)(n.code,{children:"super()"})," ou ",(0,a.jsx)(n.code,{children:"this()"}),' sur la premi\xe8re ligne du\ncode du constructeur, le compilateur fait appel au constructeur sans param\xe8tre\nde la classe de base ("appel implicite").']}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public PorteVerrouCharniere(){\n    estVerrouille = false;\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"m\xe9thode-h\xe9rit\xe9e",children:"M\xe9thode h\xe9rit\xe9e"}),"\n",(0,a.jsx)(n.p,{children:"En fonction des port\xe9es, les m\xe9thodes d'instance h\xe9rit\xe9es sont applicables sur\nl'instance de la classe d\xe9riv\xe9e. Les m\xe9thodes de classe de la classe de base\nsont applicables sur la classe d\xe9riv\xe9e."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"PorteVerrouCharniere v = new PorteVerrouCharniere();\nv.fermer();\nv.verrouiller();\n"})}),"\n",(0,a.jsx)(n.h2,{id:"le-m\xe9canisme-de-red\xe9finition-des-m\xe9thodes-dinstance",children:"Le m\xe9canisme de red\xe9finition des m\xe9thodes d'instance"}),"\n",(0,a.jsx)(n.p,{children:"Dans une classe d\xe9riv\xe9e, il est parfois n\xe9cessaire d'adapter le code d'une\nm\xe9thode d'instance h\xe9rit\xe9e \xe0 la nouvelle r\xe9alisation. La red\xe9finition permet de\nr\xe9\xe9crire le code d'une m\xe9thode h\xe9rit\xe9e. Ce m\xe9canisme n'est applicable que sur\nune m\xe9thode accessible et en respectant le prototype d\xe9clar\xe9 dans la classe de\nbase"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"la port\xe9e peut \xeatre \xe9largie (prot\xe9g\xe9e en public, paquetage en prot\xe9g\xe9 ou\npublic)"}),"\n",(0,a.jsx)(n.li,{children:"le type de retour peut-\xeatre un sous type du type de retour de la m\xe9thode"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Prenons l'exemple de la classe ",(0,a.jsx)(n.code,{children:"PorteVerrouCharniere"}),". Cette classe h\xe9rite de la\nclasse ",(0,a.jsx)(n.code,{children:"PorteCharniere"})," et doit red\xe9finir le code de la m\xe9thode d'instance\n",(0,a.jsx)(n.code,{children:"ouvrir()"})," mais en r\xe9utilisant le code de cette m\xe9thode dans la classe de base."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class PorteVerrouCharniere extends porte.PorteCharniere{\n    //...\n    public void ouvrir(){\n        if(!estVerrouille())\n            ouvrir();\n    }\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Dans ce cas, nous avons un appel r\xe9cursif. Nous devons avoir un moyen de\nd\xe9signer la d\xe9finition de la m\xe9thode dans la classe de base directe :\n",(0,a.jsx)(n.code,{children:"super.ouvrir()"}),". Par d\xe9faut, toutes les m\xe9thodes d'instance accessibles par la\nclasse d\xe9riv\xe9e peuvent \xeatre red\xe9finies. Le mot cl\xe9 ",(0,a.jsx)(n.code,{children:"final"})," devant le prototype\nde la m\xe9thode emp\xeache la red\xe9finition de cette m\xe9thode dans les classes\nd\xe9riv\xe9es."]}),"\n",(0,a.jsx)(n.h3,{id:"retour-sur-le-polymorphisme",children:"Retour sur le polymorphisme"}),"\n",(0,a.jsx)(n.p,{children:"Pour assurer la substitution d'objets, l'aiguillage vers la m\xe9thode doit se\nfaire \xe0 l'ex\xe9cution. Pour cela, la liaison dynamique est employ\xe9e sur les\nm\xe9thodes d'instance."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"PorteVerrouCharniere v = new PorteVerrouCharniere();\nv.fermer();\nv.verrouiller();\nv.ouvrir;\nv.estFerme();\n\nPorteCharniere c = v;\nc.ouvrir(); // ??\nc.estFerme(); // ??\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Voici une version du m\xeame service verrou appliqu\xe9 \xe0 l'encapsulation ",(0,a.jsx)(n.code,{children:"porte coulissante"})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"public class PorteVerrouCoulissante extends PorteCoulissante {\n    private boolean estDeVerrouille ;\n    public PorteVerrouCoulissante ( int pasMax ) {\n        super ( pasMax ) ;\n        estDeVerrouille = true;\n    }\n    public void verrouiller(){\n        estDeVerrouille = false;\n    }\n    public void deverrouiller(){\n        estDeVerrouille = true;\n    }\n    public boolean estVerrouille() {\n    return ! estDeVerrouille ;\n    }\n\n    @Override\n    public void ouvrir() {\n        if(estDeVerrouille)\n        super.ouvrir();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h4,{id:"au-sujet-des-m\xe9thodes-de-classe",children:"Au sujet des m\xe9thodes de classe"}),"\n",(0,a.jsxs)(n.p,{children:["Le langage Java permet la modification du code des m\xe9thodes de classe h\xe9rit\xe9es\n(toujours en respectant le prototype d\xe9fini dans la classe de base). Mais avec\nune restriction forte, l'aiguillage des m\xe9thodes de classe s'effectue avec une\nliaison statique. Nous avons affaire \xe0 un ",(0,a.jsx)(n.strong,{children:"m\xe9canisme de masquage"})," et non \xe0 un\nm\xe9canisme de red\xe9finition. Comme en Java, il est possible de d\xe9clencher une\nm\xe9thode de classe sur une instance. L'envoi du message ",(0,a.jsx)(n.code,{children:"a.m()"})," est ambigu par\nrapport \xe0 l'objectif de substitution d'objets dans le code."]}),"\n",(0,a.jsx)(n.h2,{id:"classe-abstraite",children:"Classe abstraite"}),"\n",(0,a.jsxs)(n.p,{children:["Une classe abstraite (",(0,a.jsx)(n.code,{children:"abstract class"})," en Java) n'est pas instanciable mais\ncontient quand m\xeame du code (attributs et m\xe9thodes). Dans la hi\xe9rarchie de\nclasses, une classe abstraite va servir \xe0 factoriser le code utilis\xe9 dans les\nclasses d\xe9riv\xe9es. Pour respecter l'encapsulation, une classe abstraite\nd\xe9finissant des attributs doit d\xe9finir un ou plusieurs constructeurs. Dans une\nclasse, une m\xe9thode abstraite (sans corps) est d\xe9clar\xe9e avec le mot-cl\xe9\n",(0,a.jsx)(n.code,{children:"abstract"})," et sans accolades. Le code d'une m\xe9thode abstraite est d\xe9fini dans\nles classes d\xe9riv\xe9es. Une classe contenant une m\xe9thode abstraite est forc\xe9ment\nabstraite. La r\xe9alisation de cette classe abstraite peut faire appel \xe0 la\nm\xe9thode abstraite. Par polymorphisme, l'ex\xe9cution de cet appel contiendra le code\nd'une des classes d\xe9riv\xe9es. La liaison statique pour les m\xe9thodes de classe\nimplique qu'une m\xe9thode de classe ne peut pas \xeatre abstraite."]}),"\n",(0,a.jsxs)(n.h3,{id:"factoriser-la-m\xe9thode-envoyercommande",children:["Factoriser la m\xe9thode ",(0,a.jsx)(n.code,{children:"envoyerCommande()"})]}),"\n",(0,a.jsxs)(n.p,{children:["Nous modifions l'h\xe9ritage de classes. Le code \xe0 factoriser est contenu dans une\nclasse abstraite ",(0,a.jsx)(n.code,{children:"PorteAbstraite"})," qui devient la classe de base des classes\n",(0,a.jsx)(n.code,{children:"PorteCharniere"})," et ",(0,a.jsx)(n.code,{children:"PorteCouilissante"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"package porte;\n\nimport matos.onde.DentBleu;\n\npublic abstract class PorteAbstraite{\n    private final DentBleu canal;\n    protected PorteAbstraite(DentBleu d){\n        canal = d;\n    }\n    final protected void envoyerCommande(String ... cmms){\n        canal.connecter();\n        for(int i = 0; i<cmms.length; i++)\n            canal.envoyer(cmms[i]);\n        canal.deconnecter();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Dans ce cas, le code factoris\xe9 est d\xe9clench\xe9 par les classes d\xe9riv\xe9es."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package porte;\n\npublic class PorteCharniere extends PorteAbstraite{\n    private boolean estFerme;\n    public PorteCharniere(){\n        super(new matos.onde.DentBleu());\n        _ouvrir_();\n    }\n    public boolean estFerme(){\n        return estFerme;\n    }\n    public void fermer(){\n        envoyerCommande("pivoter_charniere");\n        estFerme=true;\n    }\n    public void ouvrir(){\n        _ouvrir_();\n    }\n    private void _ouvrir_(){\n        envoyerCommande("manoeuvrer_bec","pivoter_charniere");\n        estFerme = false;\n    }\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Pour traiter la substitution d'objet dans la classe ",(0,a.jsx)(n.code,{children:"Telecommande"}),", la classe\nabstraite ",(0,a.jsx)(n.code,{children:"PorteAbstraite"}),' doit poss\xe9der un lien "est-un" avec l\'interface\n',(0,a.jsx)(n.code,{children:"Porte"}),"."]}),"\n",(0,a.jsx)(n.h3,{id:"factoriser-le-traitement-du-verrou",children:"Factoriser le traitement du verrou"}),"\n",(0,a.jsxs)(n.p,{children:["De la m\xeame fa\xe7on, le code est factoris\xe9 dans une classe de base commune aux deux\nclasses. Le code de la m\xe9thode ",(0,a.jsx)(n.code,{children:"ouvrir()"})," contient une partie de code \xe0\nfactoriser et une partie de code d\xe9pendant de chaque r\xe9alisation de\nl'abstraction ",(0,a.jsx)(n.code,{children:"porte"}),". La m\xe9thode ",(0,a.jsx)(n.code,{children:"ouvrir()"})," est d\xe9finie dans la classe de base\navec le code factoris\xe9. Pour contenir le code d\xe9pendant des r\xe9alisations, nous\nd\xe9finissons une m\xe9thode abstraite. Cette fois, c'est la classe abstraite qui\nd\xe9clenche un traitement sur les classes d\xe9riv\xe9es."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'package porte;\n\nimport matos.onde.DenBleu;\n\npublic abstact class PorteAbstraite{\n    private final DentBleu canal;\n    private boolean estDeVerrouille;\n\n    final protected void envoyerCommande(String ... cmms){\n        canal.connecter();\n        for(int i = 0; i < cmms.length; i++)\n            canal.envoyer(cmms[i]);\n        canal.deconnecter();\n    }\n\n    protected PorteAbstraite(DentBleu d){\n        canal = d;\n        estDeVerouille = true;\n        envoyerCommande("mettre_verrou");\n    }\n\n    public void verrouiller(){\n        envoyerCommande("mettre_verrou");\n        estDeVerrouille = false;\n    }\n\n    public void deverrouiller(){\n        envoyerCommande("enlever_verrou");\n        estDeVerouille = true;\n    }\n\n    public boolean estVerrouille(){\n        return !estDeVerrouille;\n    }\n\n    //code factoris\xe9 de la m\xe9thode ouvrir()\n    final public void ouvrir(){\n        if(estDeVerrouille)\n            faireOuvrir();\n    }\n\n    //code de la m\xe9thode ouvrir() d\xe9pendant des r\xe9alisations\n    protected abstract void faireOuvrir();\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"substitution-dobjets-et-factorisation-de-code",children:"Substitution d'objets et factorisation de code"}),"\n",(0,a.jsxs)(n.p,{children:["Le cas de la factorisation du verrou peut s'envisager d'une autre mani\xe8re. Nous\nallons encapsuler le code \xe0 factoriser. C'est \xe0 dire que le code factoris\xe9 dans\nun objet s\xe9par\xe9 des instances de ",(0,a.jsx)(n.code,{children:"PorteCharniere"})," et de ",(0,a.jsx)(n.code,{children:"PorteCoulissante"}),". Nous\nd\xe9finissons une classe ",(0,a.jsx)(n.code,{children:"Verrou"})," contenant la r\xe9alisation du verrou et les\nm\xe9thodes d\xe9finies dans l'interface ",(0,a.jsx)(n.code,{children:"Porte"}),". Le code factoris\xe9 est appliqu\xe9 sur\nles instances de ",(0,a.jsx)(n.code,{children:"PorteCharniere"})," et de ",(0,a.jsx)(n.code,{children:"PorteCoulissante"}),". La classe ",(0,a.jsx)(n.code,{children:"Verrou"}),'\nposs\xe8de un lien "a-un" pour d\xe9clencher les m\xe9thodes sur ces instances. Cette\nsolution n\xe9cessite une substitution des instances de ',(0,a.jsx)(n.code,{children:"PorteCharniere"})," et de\n",(0,a.jsx)(n.code,{children:"PorteCoulissante"})," dans le code de la classe ",(0,a.jsx)(n.code,{children:"Verrou"}),". Nous avons besoin de\nl'interface ",(0,a.jsx)(n.code,{children:"Porte"})," et de la relation de type / sous-type."]}),"\n",(0,a.jsx)(n.h2,{id:"h\xe9ritage-multiple-et-choix-des-membres-h\xe9rit\xe9s",children:"H\xe9ritage multiple et choix des membres h\xe9rit\xe9s"}),"\n",(0,a.jsx)(n.p,{children:"Dans le cas de l'h\xe9ritage multiple, la d\xe9claration / signature d'une m\xe9thode\nabstraite ou la d\xe9finition d'un membre h\xe9rit\xe9 peut provenir de plusieurs classes\nde base directes."}),"\n",(0,a.jsx)(n.p,{children:"L'h\xe9ritage multiple de la d\xe9claration / signature d'une m\xe9thode abstraite ne\nprovoque pas de cas ambigu de choix. La d\xe9claration / signature est unique m\xeame\nsi elle est r\xe9p\xe9t\xe9e et un code est \xe0 fournir pour cette d\xe9claration."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'interface Allsage{\n    public void mrRobot();\n}\n\ninterface Evilcorp{\n    public void mrRobot();\n}\n\nabstract class Fsociety{\n    abstract public void mrRobot();\n}\n\nclass Elliot extends Fsociety implements AllSafe, Evilcorp{\n    public void mrRobot(){\n        System.out.println("hello");\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Par contre l'h\xe9ritage multiple de d\xe9finition (de code) peut aboutir \xe0 une\nambigu\xeft\xe9 dans le choix de la d\xe9finition \xe0 utiliser. Un exemple avec des\nvariables de classe constante :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"interface Ulukai{\n    public static final int MAX = -999;\n}\n\ninterface Adelpha{\n    public static final int MAX = 666;\n}\n\ninterface Outcast extends Adelpha, Ulukai{}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["L'appel ",(0,a.jsx)(n.code,{children:"Outcast.MAX"})," est ambigu; le compilateur provoque une erreur. Pour\nl'\xe9viter dans ",(0,a.jsx)(n.code,{children:"Outcast"}),", il est n\xe9cessaire de d\xe9finir une autre variable ",(0,a.jsx)(n.code,{children:"MAX"}),"\nqui va masquer les deux autres : ",(0,a.jsx)(n.code,{children:"public static final MAX = Ulukai.MAX"}),";"]}),"\n",(0,a.jsx)(n.h3,{id:"les-interfaces-en-java-8",children:"Les interfaces en Java 8"}),"\n",(0,a.jsxs)(n.p,{children:["La version 8 du langage Java a modifi\xe9 la construction ",(0,a.jsx)(n.code,{children:"interface"}),". Elle peut\ncontenir la d\xe9finition de m\xe9thodes de classe et le code par d\xe9faut de m\xe9thodes\nd'instances."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"[public] interface NomInterface [extends interface1, interface2]{\n    static final public type nom = valeur;\n\n    [public] static type methodeClasse([liste param\xe8tre]);\n\n    default [public] type methodeInstanceAvecCode([liste param\xe8tre]){\n\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Le code par d\xe9faut de la m\xe9thode d'instance est uitlis\xe9 si la classe r\xe9alisant\ncette interface ne red\xe9finit pas cette m\xe9thode."}),"\n",(0,a.jsx)(n.p,{children:"Ce m\xe9canisme de code par d\xe9faut (\"d\xe9fault method\") permet d'ajouter de nouvelles\nfonctionnalit\xe9s \xe0 une interface sans r\xe9gression du code binaire des sources\n\xe9crits avant la version pr\xe9c\xe9dent de cette interface. Le cas classique\nd'h\xe9ritage multiple d'interfaces :"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'interface Ulukai{\n    public static void mClasse(){\n        System.out.println("Classe_Ulukai");\n    }\n    public default void mInstance(){\n        System.out.println("Ulukai");\n    }\n}\n\ninterface Adelpha{\n    public static void mClasse(){\n        System.out.println("Classe_Adelpha");\n    }\n    public default void mInstance(){\n        System.out.println("Adelpha");\n    }\n}\n\ninterface Outcast extends Adelpha, Ulukai{\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"Pour \xe9viter l'ambigu\xeft\xe9, une m\xe9thode de classe d\xe9finie dans une interface n'est\npas h\xe9rit\xe9e. Elle est accessible uniquement \xe0 travers l'interface. Par contre\npour une m\xe9thode d'instance, il y a ambigu\xeft\xe9 sur le code par d\xe9faut \xe0 utiliser.\nLe compilateur provoque une erreur."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"error : interface Outcast inherits unrelated defaults for mInstance() from types Adelpha and Ulukai\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Il faut red\xe9finir le code par d\xe9faut dans l'interface ",(0,a.jsx)(n.code,{children:"Outcast"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"interface Outcast extends Adelpha, Ulukai{\n    public default void mInstance(){\n        Adelpha.super.mInstance();\n        //Ulukai.super.mInstance();\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Comme l'objectif est de fournir un code par d\xe9faut \xe0 une m\xe9thode d'instance, un\nalgorithme de r\xe9solution a \xe9t\xe9 ajout\xe9 pour \xe9viter les cases les plus fr\xe9quents\nd'ambigu\xeft\xe9."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"L'h\xe9ritage de classe est prioritaire"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'interface Allsafe{\n    public default void mrRobot(){\n        System.out.println("Allsafe");\n    }\n}\n\nclass Fsociety{\n    public void mrRobot(){\n        System.out.println("Fsociety");\n    }\n}\n\nclass Elliot extends Fsociety implements Evilcorp{\n\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"C'est toujours la d\xe9finition faite dans la hi\xe9rarchie de classes qui est\nchoisie."}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Sans d\xe9finition de la m\xe9thode dans la hi\xe9rarchie de classes, c'est la derni\xe8re\nred\xe9finition dans la hi\xe9rarchie d'interfaces qui est choisie."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'interface Allsafe{\n    public default void mrRobot(){\n        System.out.println("Allsafe");\n    }\n}\n\nclass Fsociety{\n    public void mrRobot(){\n        System.out.println("Fsociety");\n    }\n}\n\nclass Fsociety implements Evilcorp{}\n\nclass Elliot extends Fsociety implements Allsafe{}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var r=s(96540);const a={},i=r.createContext(a);function t(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);