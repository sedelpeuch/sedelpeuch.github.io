"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[42],{47996:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>u,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>o,toc:()=>p});var i=s(74848),n=s(28453);const a={title:"GitHub GHCR",tags:["Containerization","Registry","GitHub","Devops"]},r=void 0,o={permalink:"/pr-preview/pr-12/blog/2024/02/18/03-containerization/ghrc",source:"@site/blog/03-containerization/2024-02-18-ghrc.md",title:"GitHub GHCR",description:"GitHub Container Registry (GHCR) est un service d'h\xe9bergement de packages logiciels propos\xe9 par GitHub, permettant aux utilisateurs de stocker des packages priv\xe9s ou publics et de les utiliser comme d\xe9pendances dans leurs projets. Compatible avec plusieurs langages de programmation, GitHub Packages propose des registres pour des gestionnaires de packages tels que npm, RubyGems, Maven, Gradle, Docker, et NuGet. L'authentification sur GitHub Packages se fait exclusivement via un \"personal access token (classic)\". Les utilisateurs doivent disposer de ce token pour effectuer des op\xe9rations telles que la publication, l'installation et la suppression de packages, qu'ils soient publics, priv\xe9s ou internes. Pour les packages priv\xe9s, GitHub Packages applique des limites de stockage et de transfert de donn\xe9es en fonction du plan du compte. La gestion des packages peut \xeatre r\xe9alis\xe9e \xe0 travers l'interface utilisateur GitHub ou via l'API REST. Des webhooks peuvent \xe9galement \xeatre configur\xe9s pour suivre des \xe9v\xe9nements li\xe9s aux packages, comme la publication ou la mise \xe0 jour.",date:"2024-02-18T00:00:00.000Z",tags:[{inline:!0,label:"Containerization",permalink:"/pr-preview/pr-12/blog/tags/containerization"},{inline:!0,label:"Registry",permalink:"/pr-preview/pr-12/blog/tags/registry"},{inline:!0,label:"GitHub",permalink:"/pr-preview/pr-12/blog/tags/git-hub"},{inline:!0,label:"Devops",permalink:"/pr-preview/pr-12/blog/tags/devops"}],readingTime:4.07,hasTruncateMarker:!0,authors:[],frontMatter:{title:"GitHub GHCR",tags:["Containerization","Registry","GitHub","Devops"]},unlisted:!1,prevItem:{title:"Le concept de conteneur Docker",permalink:"/pr-preview/pr-12/blog/2024/02/18/03-containerization/docker"},nextItem:{title:"Runner GitHub Self-Hosted",permalink:"/pr-preview/pr-12/blog/2024/02/11/04-ci-cd/self-host-runner"}},u={authorsImageUrls:[]},p=[];function l(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,i.jsx)(t.p,{children:"GitHub Container Registry (GHCR) est un service d'h\xe9bergement de packages logiciels propos\xe9 par GitHub, permettant aux utilisateurs de stocker des packages priv\xe9s ou publics et de les utiliser comme d\xe9pendances dans leurs projets. Compatible avec plusieurs langages de programmation, GitHub Packages propose des registres pour des gestionnaires de packages tels que npm, RubyGems, Maven, Gradle, Docker, et NuGet. L'authentification sur GitHub Packages se fait exclusivement via un \"personal access token (classic)\". Les utilisateurs doivent disposer de ce token pour effectuer des op\xe9rations telles que la publication, l'installation et la suppression de packages, qu'ils soient publics, priv\xe9s ou internes. Pour les packages priv\xe9s, GitHub Packages applique des limites de stockage et de transfert de donn\xe9es en fonction du plan du compte. La gestion des packages peut \xeatre r\xe9alis\xe9e \xe0 travers l'interface utilisateur GitHub ou via l'API REST. Des webhooks peuvent \xe9galement \xeatre configur\xe9s pour suivre des \xe9v\xe9nements li\xe9s aux packages, comme la publication ou la mise \xe0 jour."})}function c(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>o});var i=s(96540);const n={},a=i.createContext(n);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);