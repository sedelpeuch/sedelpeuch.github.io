"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[2488],{44914:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>u});var t=n(34204),i=n(74848),r=n(28453);const l={title:"Stockage dans Kubernetes",description:"D\xe9couvrez les concepts de stockage dans Kubernetes, tels que PersistentVolume, PersistentVolumeClaim, StorageClass et Volume.",tags:["Kubernetes","Orchestration","Devops"]},a=void 0,o={authorsImageUrls:[]},u=[{value:"PersistentVolume (PV)",id:"persistentvolume-pv",level:2},{value:"Exemple de PersistentVolume",id:"exemple-de-persistentvolume",level:3},{value:"PersistentVolumeClaim (PVC)",id:"persistentvolumeclaim-pvc",level:2},{value:"Exemple de PersistentVolumeClaim",id:"exemple-de-persistentvolumeclaim",level:3},{value:"Cycle de vie des PersistentVolumes (PV) et PersistentVolumeClaims (PVC)",id:"cycle-de-vie-des-persistentvolumes-pv-et-persistentvolumeclaims-pvc",level:2},{value:"Cycle de vie des PV",id:"cycle-de-vie-des-pv",level:3},{value:"Cycle de vie des PVC",id:"cycle-de-vie-des-pvc",level:3},{value:"Diagramme Mermaid",id:"diagramme-mermaid",level:3},{value:"StorageClass",id:"storageclass",level:2},{value:"Provisionnement dynamique",id:"provisionnement-dynamique",level:3},{value:"Exemple de StorageClass",id:"exemple-de-storageclass",level:3},{value:"Exemple de PersistentVolumeClaim utilisant une StorageClass",id:"exemple-de-persistentvolumeclaim-utilisant-une-storageclass",level:3},{value:"Volume",id:"volume",level:2},{value:"Exemple de Volume",id:"exemple-de-volume",level:3},{value:"Stockage statique et dynamique",id:"stockage-statique-et-dynamique",level:2},{value:"Stockage statique",id:"stockage-statique",level:3},{value:"Stockage dynamique",id:"stockage-dynamique",level:3},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.p,{children:"Kubernetes offre des m\xe9canismes pour monter et utiliser du stockage dans les pods, mais la gestion des donn\xe9es, y compris la provision, la sauvegarde et la r\xe9plication, est une t\xe2che qui incombe aux administrateurs du cluster. Dans cet article, les concepts de stockage dans Kubernetes, notamment PersistentVolume, PersistentVolumeClaim, StorageClass et Volume, seront explor\xe9s. \ud83d\udce6"}),"\n",(0,i.jsx)(s.h2,{id:"persistentvolume-pv",children:"PersistentVolume (PV)"}),"\n",(0,i.jsx)(s.p,{children:"Un PersistentVolume (PV) est une ressource Kubernetes qui repr\xe9sente un volume de stockage dans le cluster. Il peut \xeatre provisionn\xe9 dynamiquement ou statiquement et est utilis\xe9 pour stocker des donn\xe9es de mani\xe8re persistante. Les PVs sont ind\xe9pendants des pods et peuvent \xeatre r\xe9clam\xe9s par des PersistentVolumeClaims (PVCs)."}),"\n",(0,i.jsx)(s.h3,{id:"exemple-de-persistentvolume",children:"Exemple de PersistentVolume"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: my-pv\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Retain\n  storageClassName: my-storage-class\n  hostPath:\n    path: /mnt/data\n"})}),"\n",(0,i.jsx)(s.h2,{id:"persistentvolumeclaim-pvc",children:"PersistentVolumeClaim (PVC)"}),"\n",(0,i.jsx)(s.p,{children:"Un PersistentVolumeClaim (PVC) est une ressource Kubernetes utilis\xe9e par les pods pour demander un certain type et une certaine quantit\xe9 de stockage persistant. Les PVCs sont li\xe9s aux PVs disponibles dans le cluster."}),"\n",(0,i.jsx)(s.h3,{id:"exemple-de-persistentvolumeclaim",children:"Exemple de PersistentVolumeClaim"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: my-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: my-storage-class\n"})}),"\n",(0,i.jsx)(s.h2,{id:"cycle-de-vie-des-persistentvolumes-pv-et-persistentvolumeclaims-pvc",children:"Cycle de vie des PersistentVolumes (PV) et PersistentVolumeClaims (PVC)"}),"\n",(0,i.jsx)(s.p,{children:"Le cycle de vie des PersistentVolumes (PV) et PersistentVolumeClaims (PVC) dans Kubernetes suit plusieurs \xe9tapes, de la cr\xe9ation \xe0 la suppression."}),"\n",(0,i.jsx)(s.h3,{id:"cycle-de-vie-des-pv",children:"Cycle de vie des PV"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Provisioning"}),": Le PV est cr\xe9\xe9 soit statiquement par un administrateur, soit dynamiquement par le contr\xf4leur de stockage."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Binding"}),": Le PV est li\xe9 \xe0 un PVC lorsqu'un PVC correspondant est cr\xe9\xe9."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Using"}),": Le PV est utilis\xe9 par un pod via le PVC."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Reclaiming"}),": Lorsque le PVC est supprim\xe9, le PV entre dans une phase de r\xe9cup\xe9ration selon sa politique de r\xe9cup\xe9ration (Retain, Recycle, Delete)."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Releasing"}),": Le PV est lib\xe9r\xe9 mais reste associ\xe9 au PVC jusqu'\xe0 ce que la politique de r\xe9cup\xe9ration soit appliqu\xe9e."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Recycling/Deleting"}),": Le PV est soit recycl\xe9 pour \xeatre r\xe9utilis\xe9, soit supprim\xe9."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"cycle-de-vie-des-pvc",children:"Cycle de vie des PVC"}),"\n",(0,i.jsxs)(s.ol,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Pending"}),": Le PVC est cr\xe9\xe9 et attend qu'un PV correspondant soit disponible."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Bound"}),": Le PVC est li\xe9 \xe0 un PV disponible."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Using"}),": Le PVC est utilis\xe9 par un pod pour acc\xe9der au stockage."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Released"}),": Le PVC est supprim\xe9 et le PV entre dans la phase de r\xe9cup\xe9ration."]}),"\n"]}),"\n",(0,i.jsx)(s.h3,{id:"diagramme-mermaid",children:"Diagramme Mermaid"}),"\n",(0,i.jsx)(s.mermaid,{value:"graph TD\n  subgraph PV\n    A[Provisioning] --\x3e B[Binding]\n    B --\x3e C[Using]\n    C --\x3e D[Reclaiming]\n    D --\x3e E[Releasing]\n    E --\x3e F[Recycling/Deleting]\n  end\n\n  subgraph PVC\n    G[Pending] --\x3e H[Bound]\n    H --\x3e I[Using]\n    I --\x3e J[Released]\n  end\n\n  B -.-> H\n  H -.-> B\n  J -.-> D"}),"\n",(0,i.jsx)(s.h2,{id:"storageclass",children:"StorageClass"}),"\n",(0,i.jsx)(s.p,{children:"Une StorageClass est une ressource Kubernetes utilis\xe9e pour d\xe9finir les types de stockage disponibles dans le cluster. Elle permet de provisionner dynamiquement des PersistentVolumes en fonction des besoins sp\xe9cifiques des applications."}),"\n",(0,i.jsx)(s.h3,{id:"provisionnement-dynamique",children:"Provisionnement dynamique"}),"\n",(0,i.jsx)(s.p,{children:"Le provisionnement dynamique permet de cr\xe9er automatiquement des PersistentVolumes (PVs) lorsque des PersistentVolumeClaims (PVCs) sont demand\xe9s par les pods. Cela simplifie la gestion du stockage en \xe9liminant la n\xe9cessit\xe9 de cr\xe9er manuellement des PVs. Pour utiliser le provisionnement dynamique, les administrateurs du cluster doivent d\xe9finir des StorageClasses qui sp\xe9cifient les types de stockage disponibles et les param\xe8tres de provisionnement."}),"\n",(0,i.jsx)(s.h3,{id:"exemple-de-storageclass",children:"Exemple de StorageClass"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"apiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: my-storage-class\nprovisioner: kubernetes.io/no-provisioner\nvolumeBindingMode: WaitForFirstConsumer\n"})}),"\n",(0,i.jsx)(s.h3,{id:"exemple-de-persistentvolumeclaim-utilisant-une-storageclass",children:"Exemple de PersistentVolumeClaim utilisant une StorageClass"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: my-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: my-storage-class\n"})}),"\n",(0,i.jsx)(s.p,{children:"En utilisant une StorageClass avec le provisionnement dynamique, Kubernetes cr\xe9era automatiquement un PV correspondant aux sp\xe9cifications du PVC lorsque celui-ci sera cr\xe9\xe9. Cela est \xe9galement possible on-premise, \xe0 condition que le cluster Kubernetes soit configur\xe9 avec un provisionneur de stockage compatible. Les administrateurs du cluster doivent s'assurer que les StorageClasses sont correctement d\xe9finies pour le stockage on-premise."}),"\n",(0,i.jsx)(s.h2,{id:"volume",children:"Volume"}),"\n",(0,i.jsx)(s.p,{children:"Un Volume Kubernetes est un r\xe9pertoire, potentiellement mont\xe9 \xe0 partir du stockage du n\u0153ud, partag\xe9 entre les conteneurs d'un pod. Les volumes sont utilis\xe9s pour stocker des donn\xe9es de mani\xe8re temporaire ou persistante."}),"\n",(0,i.jsx)(s.h3,{id:"exemple-de-volume",children:"Exemple de Volume"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-yaml",children:"apiVersion: v1\nkind: Pod\nmetadata:\n  name: my-pod\nspec:\n  containers:\n    - name: my-container\n      image: nginx:alpine\n      volumeMounts:\n        - mountPath: /usr/share/nginx/html\n          name: my-volume\n  volumes:\n    - name: my-volume\n      persistentVolumeClaim:\n        claimName: my-pvc\n"})}),"\n",(0,i.jsx)(s.h2,{id:"stockage-statique-et-dynamique",children:"Stockage statique et dynamique"}),"\n",(0,i.jsx)(s.p,{children:"Le stockage dans Kubernetes peut \xeatre provisionn\xe9 de mani\xe8re statique ou dynamique."}),"\n",(0,i.jsx)(s.h3,{id:"stockage-statique",children:"Stockage statique"}),"\n",(0,i.jsx)(s.p,{children:"Le stockage statique implique la cr\xe9ation manuelle de PersistentVolumes (PVs) par les administrateurs du cluster. Les PVs sont d\xe9finis \xe0 l'avance et sont disponibles pour \xeatre r\xe9clam\xe9s par les PersistentVolumeClaims (PVCs). Cette m\xe9thode est utile lorsque des exigences sp\xe9cifiques de stockage doivent \xeatre respect\xe9es."}),"\n",(0,i.jsx)(s.h3,{id:"stockage-dynamique",children:"Stockage dynamique"}),"\n",(0,i.jsx)(s.p,{children:"Le stockage dynamique permet de provisionner automatiquement des PersistentVolumes (PVs) en fonction des besoins des applications. Les administrateurs du cluster d\xe9finissent des StorageClasses qui sp\xe9cifient les types de stockage disponibles. Lorsqu'un PersistentVolumeClaim (PVC) est cr\xe9\xe9, Kubernetes utilise la StorageClass pour provisionner dynamiquement un PV correspondant aux sp\xe9cifications du PVC. Cette m\xe9thode simplifie la gestion du stockage et permet une allocation plus flexible des ressources."}),"\n",(0,i.jsx)(s.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsx)(s.p,{children:"Les concepts de stockage dans Kubernetes, tels que PersistentVolume, PersistentVolumeClaim, StorageClass et Volume, permettent de g\xe9rer efficacement le stockage des donn\xe9es dans les applications conteneuris\xe9es. En comprenant ces concepts, il est possible de tirer parti de la puissance de Kubernetes pour g\xe9rer le stockage des applications. \ud83d\udcca"}),"\n",(0,i.jsxs)(s.p,{children:["Pour en savoir plus sur Kubernetes, consulter la ",(0,i.jsx)(s.a,{href:"https://kubernetes.io/fr/docs/concepts/",children:"documentation officielle"}),"."]})]})}function c(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>a});var t=n(96540);const i={},r=t.createContext(i);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:s},e.children)}},34204:e=>{e.exports=JSON.parse('{"permalink":"/pr-preview/pr-15/blog/2025/02/10/06-orchestration/k8s-storage","source":"@site/blog/06-orchestration/2025-02-10-k8s-storage.md","title":"Stockage dans Kubernetes","description":"D\xe9couvrez les concepts de stockage dans Kubernetes, tels que PersistentVolume, PersistentVolumeClaim, StorageClass et Volume.","date":"2025-02-10T00:00:00.000Z","tags":[{"inline":true,"label":"Kubernetes","permalink":"/pr-preview/pr-15/blog/tags/kubernetes"},{"inline":true,"label":"Orchestration","permalink":"/pr-preview/pr-15/blog/tags/orchestration"},{"inline":true,"label":"Devops","permalink":"/pr-preview/pr-15/blog/tags/devops"}],"readingTime":4.415,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Stockage dans Kubernetes","description":"D\xe9couvrez les concepts de stockage dans Kubernetes, tels que PersistentVolume, PersistentVolumeClaim, StorageClass et Volume.","tags":["Kubernetes","Orchestration","Devops"]},"unlisted":false,"prevItem":{"title":"Secrets et ConfigMaps dans Kubernetes","permalink":"/pr-preview/pr-15/blog/2025/02/15/06-orchestration/k8s-secrets-configmaps"},"nextItem":{"title":"Composants de base de Kubernetes","permalink":"/pr-preview/pr-15/blog/2025/02/05/06-orchestration/k8s-basic-components"}}')}}]);