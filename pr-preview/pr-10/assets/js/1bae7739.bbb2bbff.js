"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[6042],{22458:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var t=s(74848),i=s(28453);const r={title:"Substitution d'objets - La substitution d'objets ou polymorphisme"},a=void 0,l={id:"enseirb/s7/poo/5",title:"Substitution d'objets - La substitution d'objets ou polymorphisme",description:"Nous voulons pouvoir adapter le code d'une application en substituant une",source:"@site/docs/enseirb/s7/poo/5.md",sourceDirName:"enseirb/s7/poo",slug:"/enseirb/s7/poo/5",permalink:"/pr-preview/pr-10/docs/enseirb/s7/poo/5",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Substitution d'objets - La substitution d'objets ou polymorphisme"},sidebar:"tutorialSidebar",previous:{title:"Objet et encapsulation - Variables et m\xe9thodes de classe",permalink:"/pr-preview/pr-10/docs/enseirb/s7/poo/4"},next:{title:"Substitution d'objets - Hi\xe9rarchie de classes",permalink:"/pr-preview/pr-10/docs/enseirb/s7/poo/7"}},o={},c=[{value:"Relation de type / sous types",id:"relation-de-type--sous-types",level:2},{value:"Lien &quot;est-un&quot; et abstraction",id:"lien-est-un-et-abstraction",level:2},{value:"La construction interface",id:"la-construction-interface",level:3},{value:"H\xe9ritage entre une classe et des interfaces",id:"h\xe9ritage-entre-une-classe-et-des-interfaces",level:3},{value:"Le polymorphisme",id:"le-polymorphisme",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Nous voulons pouvoir adapter le code d'une application en substituant une\ninstance d'une classe par une instance d'une autre classe. Dans notre exemple :\nune instance de ",(0,t.jsx)(n.code,{children:"Telecommande"})," doit manipuler plusieurs r\xe9alisations diff\xe9rentes\nde l'abstraction ",(0,t.jsx)(n.code,{children:"Porte"}),". Le code de la classe ",(0,t.jsx)(n.code,{children:"Telecommande"})," doit permettre de\nsubstituer une instance de la classe ",(0,t.jsx)(n.code,{children:"PorteCharniere"})," par une instance de la\nclasse ",(0,t.jsx)(n.code,{children:"PorteCoulissante"}),". Ajouter une nouvelle r\xe9alisation, correspond \xe0\najouter une nouvelle classe et \xe0 l'instancier."]}),"\n",(0,t.jsxs)(n.p,{children:["Concr\xe8tement, dans le code de la classe ",(0,t.jsx)(n.code,{children:"Telecommande"})," :"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Un emplacement dans le tableau ",(0,t.jsx)(n.code,{children:"mesPortes[numero]"})," va r\xe9f\xe9rencer \xe0 la fois une\ninstance de la classe ",(0,t.jsx)(n.code,{children:"PorteCharniere"})," et une instance de la classe\n",(0,t.jsx)(n.code,{children:"PorteCoulissante"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["L'envoi du message ",(0,t.jsx)(n.code,{children:"mesPortes[numero].ouvrir()"})," doit s'appliquer \xe0 la fois \xe0\nune instance de la classe ",(0,t.jsx)(n.code,{children:"PorteCharniere"})," et \xe0 une instance de la classe\n",(0,t.jsx)(n.code,{children:"PorteCoulissante"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Pour rendre possible la substitution d'objet, il faut :"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"assurer la validit\xe9 de l'envoi de message sur les instances de classes\ndiff\xe9rentes r\xe9f\xe9renc\xe9e par la m\xeame variable"}),"\n",(0,t.jsx)(n.li,{children:"assurer l'aiguillage vers le code correspondant \xe0 la bonne instance r\xe9f\xe9renc\xe9e\npar cette variable."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"relation-de-type--sous-types",children:"Relation de type / sous types"}),"\n",(0,t.jsx)(n.p,{children:"Dans un langage typ\xe9, chaque classe d\xe9finit un type ind\xe9pendant. La relation de\ntype/sous-type va introduire un lien entre deux types."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"D\xe9finition :"})," Soit un type ",(0,t.jsx)(n.code,{children:"L"})," d\xe9clarant une op\xe9ration ",(0,t.jsx)(n.code,{children:"action()"}),". Si un type\n",(0,t.jsx)(n.code,{children:"H"})," est d\xe9clar\xe9 sous-type du type ",(0,t.jsx)(n.code,{children:"L"})," alors le type ",(0,t.jsx)(n.code,{children:"H"})," contient toutes les\nd\xe9clarations contenues dans ",(0,t.jsx)(n.code,{children:"L"}),". L'op\xe9ration ",(0,t.jsx)(n.code,{children:"action()"})," se retrouve, aussi,\nd\xe9clar\xe9e dans le type ",(0,t.jsx)(n.code,{children:"H"}),". Dans un langage objet, cette relation de type /\nsous-type permet \xe0 une variable de type ",(0,t.jsx)(n.code,{children:"L"})," d'accepter des instances de la\nclasse ",(0,t.jsx)(n.code,{children:"L"})," mais aussi des instances de toutes les classes sous-types (par\nexemple de la classe ",(0,t.jsx)(n.code,{children:"H"}),"). La classe ",(0,t.jsx)(n.code,{children:"H"}),' poss\xe8de un lien "est-un" avec la classe\n',(0,t.jsx)(n.code,{children:"L"}),' ("H est-un L").']}),"\n",(0,t.jsx)(n.p,{children:'Le transtypage du sous-type vers le type est implicite puisque le lien "est-un"\nassure que toutes les op\xe9rations du type se trouvent dans le sous-type. Le\ncompilateur v\xe9rifie la validit\xe9 des messages par rapport au type de la variable.\nDans un langage orient\xe9 objet, cette relation de type / sous type (ce lien\n"est-un") se construit \xe0 travers le m\xe9canisme de l\'h\xe9ritage.'}),"\n",(0,t.jsx)(n.h2,{id:"lien-est-un-et-abstraction",children:'Lien "est-un" et abstraction'}),"\n",(0,t.jsxs)(n.p,{children:["Dans notre exemple le code de la classe ",(0,t.jsx)(n.code,{children:"Telecommande"})," doit rester ind\xe9pendant\ndes r\xe9alisations de porte. La classe ",(0,t.jsx)(n.code,{children:"Porte"})," est une abstraction et les classes\n",(0,t.jsx)(n.code,{children:"PorteCharniere"})," et ",(0,t.jsx)(n.code,{children:"PorteCoulissante"})," sont des r\xe9alisations de cette\nabstraction. Dans ce cas, il est pr\xe9f\xe9rable de d\xe9finir ",(0,t.jsx)(n.code,{children:"Porte"})," comme une\n",(0,t.jsx)(n.strong,{children:"classe abstraite pure"})," (sans aucune r\xe9alisation). En Java, nous utilisons la\nconstruction ",(0,t.jsx)(n.code,{children:"interface"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"la-construction-interface",children:"La construction interface"}),"\n",(0,t.jsxs)(n.p,{children:["Le langage Java propose une construction particuli\xe8re pour d\xe9finir une classe\nabstraite pure. Cette construction a comme mot-cl\xe9 ",(0,t.jsx)(n.code,{children:"interface"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"[public] interface NomInterface{\n    [static final public type nom = valeur;]\n    [[public] type methode([liste param\xe8tre]);]\n}\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Une interface d\xe9finit un type mais n'est pas instanciable. Il est seulement\npossible de d\xe9clarer des variables du type d'une interface."}),"\n",(0,t.jsx)(n.li,{children:"Une interface ne d\xe9finit aucune variable d'instance."}),"\n",(0,t.jsx)(n.li,{children:"Aucun constructeur n'est autoris\xe9"}),"\n",(0,t.jsx)(n.li,{children:"Une interface contient les prototypes de m\xe9thodes d'instance abstraites\npubliques. Ces m\xe9thodes sont dites abstraites car sans code (sans\nr\xe9alisation)"}),"\n",(0,t.jsx)(n.li,{children:"Comme une classe, une interface doit \xeatre d\xe9clar\xe9e publique pour \xeatre\naccessible en dehors de son paquetage"}),"\n",(0,t.jsx)(n.li,{children:"Il est possible de d\xe9finir des variables de classe constantes publiques. La\nvaleur d'une telle constante est fix\xe9e \xe0 la d\xe9finition de la variable de\nclasse"}),"\n",(0,t.jsx)(n.li,{children:"Jusqu'\xe0 Java 7, aucune m\xe9thode de classe n'\xe9tait autoris\xe9e."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:'Une classe interface permet de d\xe9finir une abstraction qui est mise en oeuvre\npar des classes concr\xe8tes. Voici la repr\xe9sentation de l\'abstraction "porte" par\nune interface'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"package Porte;\npublic interface Porte {\n\n    public boolean estFerme();\n\n    public void fermer();\n\n    public void ouvrir();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"h\xe9ritage-entre-une-classe-et-des-interfaces",children:"H\xe9ritage entre une classe et des interfaces"}),"\n",(0,t.jsxs)(n.p,{children:["Pour substituer les instances des classes ",(0,t.jsx)(n.code,{children:"PortesCharniere"})," et\n",(0,t.jsx)(n.code,{children:"PorteCoulissante"})," dans le tableau de type ",(0,t.jsx)(n.code,{children:"Porte"}),', nous devons \xe9tablir un lien\n"est-un" entre ces r\xe9alisations et l\'abstraction porte.']}),"\n",(0,t.jsxs)(n.p,{children:["Le mot-cl\xe9 ",(0,t.jsx)(n.code,{children:"implements"})," \xe9tablit une relation de type / sous-type entre une\nclasse et une ou plusieurs interfaces."]}),"\n",(0,t.jsx)(n.p,{children:"L'h\xe9ritage d'interfaces concerne globalement des d\xe9clarations de m\xe9thodes\nd'instances publique. Cet h\xe9ritage peut \xeatre assimil\xe9 \xe0 un h\xe9ritage d'un type\nabstrait."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"[public][abstract] class NomClasse implements UneInterface, UneAutreInterface{\n    //atributs\n    //constructeurs\n    //m\xe9thodes\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["En plus de ses d\xe9finitions (attributs, constructeurs, m\xe9thode) propres, la\nclasse va inclure la d\xe9claration des prototypes des m\xe9thodes de toutes les\ninterfaces d\xe9clar\xe9es apr\xe8s la cause ",(0,t.jsx)(n.code,{children:"implements"}),". Les m\xe9thodes \"h\xe9rit\xe9es\" sont\nabstraites. Pour obtenir une classe concr\xe8te \xe0 partir d'un h\xe9ritage\nd'interfaces, il est n\xe9cessaire de fournir le code pour chaque m\xe9thode d\xe9finie\ndans les interfaces en respectant le prototype de ces m\xe9thodes. Sinon, une\nclasse construite par h\xe9ritage d'interfaces est une classe abstraite."]}),"\n",(0,t.jsx)(n.h2,{id:"le-polymorphisme",children:"Le polymorphisme"}),"\n",(0,t.jsxs)(n.p,{children:["Avec la relation de type / sous-type, l'envoi de message\n",(0,t.jsx)(n.code,{children:"mesPortes[numero].ouvrir()"})," est valide pour toutes les instances d'une classe\nsous-type de ",(0,t.jsx)(n.code,{children:"Porte"}),". La m\xe9thode se retrouvant dans plusieurs classes, il reste\n\xe0 d\xe9terminer comment se fait le choix (l'aiguillage vers l'adresse) du code \xe0\nd\xe9clencher."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Liaison statique :"})," La liaison entre l'envoi du message (nom + param\xe8tre) et\nl'adresse de la m\xe9thode s'effectue \xe0 la java. Le compilateur utilise\nforc\xe9ment le type de la variable pour obtenir cette adresse."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Liaison dynamique ou retard\xe9e :"})," La liaison entre l'envoi du message et\nl'adresse de la m\xe9thode se fait \xe0 l'ex\xe9cution, en fonction de l'instance\nmanipul\xe9e. La liaison dynamique n\xe9cessite un m\xe9canisme qui permet d'obtenir\nl'adresse de la m\xe9thode \xe0 l'\xe9xecution."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"D\xe9finition :"})," Le polymorphisme est la capacit\xe9 d'un \xe9l\xe9ment de texte logiciel a\nd\xe9signer \xe0 l'ex\xe9cution des formes diff\xe9rentes."]}),"\n",(0,t.jsx)(n.p,{children:"On parle de polymorphisme lorsqu'une variable (param\xe8tre) peut r\xe9f\xe9rencer des\ninstances de plusieurs classes. Le polymorphisme n\xe9cessite la r\xe9alisation de\ntype/sous-type et la liaison dynamique. Dans un langage objet typ\xe9, la\nsubstituions d'objets est rendue op\xe9rationnelle gr\xe2ce au polymorphisme."})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);