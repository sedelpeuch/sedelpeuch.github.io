"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[9673],{28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>r});var t=n(96540);const a={},i=t.createContext(a);function l(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function r(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(i.Provider,{value:s},e.children)}},77525:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"enseirb/s7/poo/4","title":"Objet et encapsulation - Variables et m\xe9thodes de classe","description":"Dans le mod\xe8le objet, toutes les variables et m\xe9thodes sont li\xe9es \xe0 un objet.","source":"@site/docs/enseirb/s7/poo/4.md","sourceDirName":"enseirb/s7/poo","slug":"/enseirb/s7/poo/4","permalink":"/docs/enseirb/s7/poo/4","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Objet et encapsulation - Variables et m\xe9thodes de classe"},"sidebar":"tutorialSidebar","previous":{"title":"Objet et encapsulation - Les classes","permalink":"/docs/enseirb/s7/poo/3"},"next":{"title":"Substitution d\'objets - La substitution d\'objets ou polymorphisme","permalink":"/docs/enseirb/s7/poo/5"}}');var a=n(74848),i=n(28453);const l={title:"Objet et encapsulation - Variables et m\xe9thodes de classe"},r=void 0,c={},o=[{value:"Variable de classe",id:"variable-de-classe",level:2},{value:"M\xe9thode de classe",id:"m\xe9thode-de-classe",level:2},{value:"Statut de la classe en Java",id:"statut-de-la-classe-en-java",level:2}];function d(e){const s={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(s.p,{children:"Dans le mod\xe8le objet, toutes les variables et m\xe9thodes sont li\xe9es \xe0 un objet.\nC'est \xe0 dire que pour acc\xe9der \xe0 une donn\xe9e ou d\xe9clencher un traitement, il faut\nd'abord instancier une classe."}),"\n",(0,a.jsx)(s.p,{children:"Cette n\xe9cessit\xe9 de cr\xe9er d'abord un objet est difficile \xe0 respecter dans\ncertains cas particuliers :"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["D\xe9clenchement du point d'entr\xe9e du programme : la m\xe9thode ",(0,a.jsx)(s.code,{children:"main"}),". Comment\nenvoyer un message sans avoir \xe0 cr\xe9er d'objets ?"]}),"\n",(0,a.jsxs)(s.li,{children:["Les flots d'entr\xe9e / sortie standards r\xe9f\xe9renc\xe9s par les variables constante\n",(0,a.jsx)(s.code,{children:"out, in, err"})," doivent \xeatre d\xe9finis d'une mani\xe8re unique avant le d\xe9but de\nl'ex\xe9cution. O\xf9 d\xe9finir ces variables et comment les positionner avant l'appel\nau point d'entr\xe9e du programme ?"]}),"\n",(0,a.jsx)(s.li,{children:"Les op\xe9rations math\xe9matiques (abs(),\\sin()...) s'appliquent, en Java, \xe0 des\ntypes de base. Comment rendre disponible ces op\xe9rations que ne s'appliquent\npas \xe0 un objet ?"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"La construction classe va servir \xe0 contenir les donn\xe9es et traitements qui ne\nsont pas li\xe9s \xe0 des objets. Une classe n'est plus seulement la description\nd'une encapsulation mais devient utilisable \xe0 l'execution."}),"\n",(0,a.jsxs)(s.p,{children:["Par d\xe9faut, une m\xe9thode ou une variable est attach\xe9 \xe0 un objet. Le mot-cl\xe9\n",(0,a.jsx)(s.code,{children:"static"})," permet d'attacher une m\xe9thode ou une variable \xe0 une classe. Comme\npour un objet, c'est la notation point\xe9e qui est utilis\xe9e pour acc\xe9der \xe0 ces\nnouveaux membres. C'est un message envoy\xe9 \xe0 la classe et non \xe0 une instance de\ncette classe par exemple : ",(0,a.jsx)(s.code,{children:"java.lang.System.out, java.lang.Math.abs()"}),"."]}),"\n",(0,a.jsx)(s.h2,{id:"variable-de-classe",children:"Variable de classe"}),"\n",(0,a.jsx)(s.p,{children:"Une variable de classe est partag\xe9e par toutes les instances de la classe. Sa\nmodification affecte toutes les instances. Une variable de classe existe avant\ntoutes instanciation de la classe"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"static [final] [public |\xa0private] type nom\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"M\xeame si une variable de classe n'est pas stock\xe9e dans la zone m\xe9moire de\nl'objet, elle fait partie de l'ensemble des attributs de chaque instance de\ncette classe."}),"\n",(0,a.jsx)(s.li,{children:"L'initialisation d'une variable de classe s'effectue au chargement de la\nclasse. Elle peut se faire dans un \"bloc statique\" d\xe9clar\xe9 \xe0 l'int\xe9rieur de la\nclasse. La machine virtuelle ex\xe9cute le bloc statique au chargement de la\nclasse. Par exemple pour initialisation d'une variable de classe qui contient\nun table."}),"\n"]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"class Exemple{\n  static final private Porte[] portes = new Porte[10];\n  static private double[] mesReels = new double[20];\n  //...\n  static{\n    for(int i = 0; i < mesIndicateurs.length; i++)\n      portes[i] = new PorteCharniere();\n    for(int i = 0; i < mesReels.length; i++)\n      mesReels[i] = Math.random();\n  }\n}\n"})}),"\n",(0,a.jsx)(s.h2,{id:"m\xe9thode-de-classe",children:"M\xe9thode de classe"}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:"static[public|private] type m\xe9thodedeClasse([liste de param\xe8tres]){\n  //code\n}\n"})}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsx)(s.li,{children:"Le code d'une m\xe9thode de classe a acc\xe8s aux variables de classe et aux\nm\xe9thodes de classe d\xe9finies dans la classe"}),"\n",(0,a.jsxs)(s.li,{children:["Par contre, la r\xe9f\xe9rence ",(0,a.jsx)(s.code,{children:"this"})," n'est pas d\xe9finie (aucune instance n'est\ncr\xe9\xe9\xe9e). Il n'est donc pas possible d'utiliser directement les variables\nd'instance et les m\xe9thodes d'instance. Lu'ilisation doit se fiare \xe0 travers\nune instance de la classe soit pass\xe9e par param\xe8tre, soit instanci\xe9e par le\ncode de la m\xe9thode."]}),"\n",(0,a.jsx)(s.li,{children:"Une m\xe9thode de classe peut \xeatre surcharg\xe9e"}),"\n"]}),"\n",(0,a.jsx)(s.p,{children:"Les m\xe9thodes de classe s'emploient couramment pour fabriquer des instances ou\ncontenir les traitements ne correspondant \xe0 aucune encapsulation."}),"\n",(0,a.jsxs)(s.p,{children:["Pour simplifier l'\xe9criture de l'appel \xe0 une variable de classe ou une m\xe9thode de\nclasse d'un autre paquetage, il est possible d'utiliser la d\xe9claration ",(0,a.jsx)(s.code,{children:"import static"})," au d\xe9but du fichier. Par exemple ",(0,a.jsx)(s.code,{children:"import static.java.lang.Math.*"})," permet\nd'\xe9crire directement ",(0,a.jsx)(s.code,{children:"PI"})," dans le code."]}),"\n",(0,a.jsx)(s.h2,{id:"statut-de-la-classe-en-java",children:"Statut de la classe en Java"}),"\n",(0,a.jsx)(s.p,{children:"Avec l'introduction des variables de classe et des m\xe9thodes de classe, la classe\nn'est plus seulement une construction syntaxique. Elle peut \xeatre assimil\xe9e \xe0 la\nnotion de module mais aussi \xe0 la notion d'objet."}),"\n",(0,a.jsx)(s.p,{children:"Dans le mod\xe8le objet, les objets sont les seules entit\xe9s d'ex\xe9cution. Si les\nclasses sont utilisables \xe0 l'ex\xe9cution (envoi de messages), ce sont forc\xe9ment\ndes objets. La classe est donc la mise en oeuvre d'une encapsulation\nparticuli\xe8re d\xe9crivant le service commun aux classes. Ce service fournit les\ninformations sur ces d\xe9clarations / d\xe9finitions contenues dans une classe :\nvariables, port\xe9e, m\xe9thodes, constructeurs, liste de param\xe8tres ..."}),"\n",(0,a.jsx)(s.p,{children:"C'est le choix du langage Java :"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:["la description de l'encapsulation particuli\xe8re ",(0,a.jsx)(s.code,{children:"class"})," est d\xe9finie dans la\nclasse ",(0,a.jsx)(s.code,{children:"java.lang.Class"}),". Chaque classe Java est instance de ",(0,a.jsx)(s.code,{children:"java.lang.Class"})]}),"\n",(0,a.jsxs)(s.li,{children:["\xe0 l'ex\xe9cution, une classe est repr\xe9sent\xe9e d'une mani\xe8re unique par son\nfichier ",(0,a.jsx)(s.code,{children:".class"})," : ",(0,a.jsx)(s.code,{children:"System.out.println(tec.EtatPassager.class)"})]}),"\n",(0,a.jsxs)(s.li,{children:["Il est possible de d\xe9finir des variables du type ",(0,a.jsx)(s.code,{children:"Class"})]}),"\n",(0,a.jsxs)(s.li,{children:["Quelques op\xe9rations d\xe9finies dans ",(0,a.jsx)(s.code,{children:"java.lang.Class"}),"\n",(0,a.jsxs)(s.ul,{children:["\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"forName(String)"})," permet de r\xe9cup\xe9rer l'instance de ",(0,a.jsx)(s.code,{children:"Class"})," correspondant au\nnom complet en param\xe8tre"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"newInstance()"})," permet d'instancier la classe qui re\xe7oit ce message (en\nutilisant le constructeur sans param\xe8tre)"]}),"\n",(0,a.jsxs)(s.li,{children:[(0,a.jsx)(s.code,{children:"getFields(), getMethods(), getSuperClass(), getConstructors()"})," fournissent\ndes informations sur la d\xe9finition d'une classe."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(s.p,{children:["Ces op\xe9rations autorisent l'introspection des classes Java (voir les classes du\npaquetage ",(0,a.jsx)(s.code,{children:"java.lang.reflect"}),"). L'introspection est une technique de r\xe9flexion\nqui permet \xe0 un programme d'examiner son propre \xe9tat pendant l'ex\xe9cution (mais\npas de le modifier)."]}),"\n",(0,a.jsxs)(s.p,{children:["Dans les classes de test, pour \xe9viter d'oublier de compl\xe9ter la m\xe9thode\n",(0,a.jsx)(s.code,{children:"lancer()"}),", il suffit par introspection de r\xe9cup\xe9rer \xe0 l'ex\xe9cution toutes les\nm\xe9thodes dont le nom commence par la sous cha\xeene test et de les ex\xe9cuter."]}),"\n",(0,a.jsx)(s.pre,{children:(0,a.jsx)(s.code,{className:"language-java",children:'  public void runTest() throws Exception{\n    Class c = this.getClass();\n    java.lang.reflect.Method[] mesMethodes = c.getMethods();\n    int nbTest = 0;\n    for(int i = 0; i < mesMethodes.length; i++){\n      java.lang.reflect.Method m = mesMethodes[i];\n      if(m.getName().startsWith("test")){\n        System.out.print(".");\n        m.invoke(this);\n        nbTest++;\n      }\n    }\n    System.out.println("(" + nbTest + "):OK: "+ getClass().getName());\n  }\n'})})]})}function u(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,a.jsx)(s,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);