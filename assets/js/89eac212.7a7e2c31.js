"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[8814],{58721:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>o,contentTitle:()=>d,default:()=>u,frontMatter:()=>l,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"enseirb/s7/prog_sys/2","title":"Syst\xe8me de Gestion de Fichiers","description":"Le syst\xe8me de gestion de fichiers est un outil de manipulation des fichiers et","source":"@site/docs/enseirb/s7/prog_sys/2.md","sourceDirName":"enseirb/s7/prog_sys","slug":"/enseirb/s7/prog_sys/2","permalink":"/docs/enseirb/s7/prog_sys/2","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Syst\xe8me de Gestion de Fichiers"},"sidebar":"tutorialSidebar","previous":{"title":"Les threads POSIX","permalink":"/docs/enseirb/s7/prog_sys/14"},"next":{"title":"Le Buffer Cache","permalink":"/docs/enseirb/s7/prog_sys/3"}}');var r=i(74848),t=i(28453);const l={title:"Syst\xe8me de Gestion de Fichiers"},d=void 0,o={},a=[{value:"Le concept de fichier",id:"le-concept-de-fichier",level:2},{value:"Fichiers ordinaires / Fichiers sp\xe9ciaux",id:"fichiers-ordinaires--fichiers-sp\xe9ciaux",level:2},{value:"Organisation utilisateur des Disques",id:"organisation-utilisateur-des-disques",level:2},{value:"Les inodes",id:"les-inodes",level:2},{value:"Organisation des disques System V",id:"organisation-des-disques-system-v",level:2},{value:"Adressage des blocs dans les inodes",id:"adressage-des-blocs-dans-les-inodes",level:2},{value:"Allocation des inodes d&#39;un disque",id:"allocation-des-inodes-dun-disque",level:2},{value:"Allocation des blocs disques",id:"allocation-des-blocs-disques",level:2}];function c(e){const s={code:"code",em:"em",h2:"h2",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.p,{children:"Le syst\xe8me de gestion de fichiers est un outil de manipulation des fichiers et\nde la structure d'arborescence des fichiers sur disque et a aussi le r\xf4le sous\nUNIX de conserver toutes les informations dont la p\xe9rennit\xe9 est importante pour\nle syst\xe8me (et pour les utilisateurs biensur). Ainsi tous les objets importants\ndu syst\xe8me sont r\xe9f\xe9renc\xe9s dans le syst\xe8me de fichiers (m\xe9moire, terminaux,\np\xe9riph\xe9riques vari\xe9s etc). Le syst\xe8me de gestion de fichier permet une\nmanipulation simple des fichiers et g\xe8re de fa\xe7on transparente les diff\xe9rents\nprobl\xe8mes d'acc\xe8s aux supports de masse"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"partage : utilisation d'un m\xeame fichier / disque par plusieurs utilisateurs"}),"\n",(0,r.jsx)(s.li,{children:"efficacit\xe9 : utilisation de cache, uniformisation des acc\xe8s"}),"\n",(0,r.jsx)(s.li,{children:"droits : protection des \xe9l\xe9ments important du syst\xe8me et protection\ninterutilisateurs"}),"\n",(0,r.jsx)(s.li,{children:"alignement : transtypage entre la m\xe9moire et les supports magn\xe9tiques"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"le-concept-de-fichier",children:"Le concept de fichier"}),"\n",(0,r.jsxs)(s.p,{children:["L'unit\xe9 logique de base de l'interface du Syst\xe8me de Gestion de Fichiers : ",(0,r.jsx)(s.code,{children:"le fichier"}),". Un fichier UNIX est une suite finie de bytes mat\xe9rialis\xe9e par des\nblocs disques, et une inode qui contient les propri\xe9t\xe9s du fichier. Le contenu\nest enti\xe8rement d\xe9fini par le cr\xe9ateur, la gestion de l'allocation des\nressources n\xe9cessaires est a la seule responsabilit\xe9 du syst\xe8me. Sur UNIX les\nfichiers ne sont pas typ\xe9s du point de vue utilisateur, le concept de fichier\npermet de proposer un type g\xe9n\xe9rique (polymorphe) aux programmeurs le syst\xe8me\ng\xe9rant la multiplicit\xe9 des formats effectifs (diff\xe9rentes marques et conceptions\nde disques dur par exemple). L'inode d\xe9finit le fichier, soit principalement les\ninformation :"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"la localisation sur disque"}),"\n",(0,r.jsx)(s.li,{children:"le propri\xe9taire et le groupe propri\xe9taire"}),"\n",(0,r.jsx)(s.li,{children:"les droits d'acc\xe8s des diff\xe9rents utilisateurs"}),"\n",(0,r.jsx)(s.li,{children:"la taille"}),"\n",(0,r.jsx)(s.li,{children:"la date de cr\xe9ation"}),"\n"]}),"\n",(0,r.jsxs)(s.p,{children:["On trouvera sur d'autre syst\xe8mes d'autres structures d'information pour d\xe9crire\nles fichiers, par exemple NT utiliser des \"objets files records\".\n",(0,r.jsx)(s.em,{children:"Un nom est li\xe9 \xe0 un fichier (une r\xe9f\xe9rence indique un fichier) mais un fichier\nn'est pas li\xe9 \xe0 une r\xe9f\xe9rence, un fichier peut exister sans avoir le nom dans\nl'arborescence."})]}),"\n",(0,r.jsx)(s.h2,{id:"fichiers-ordinaires--fichiers-sp\xe9ciaux",children:"Fichiers ordinaires / Fichiers sp\xe9ciaux"}),"\n",(0,r.jsx)(s.p,{children:"Le syst\xe8me est un utilisateur du syst\xe8me de gestion de fichier et en temps que\ncr\xe9ateur il d\xe9finit quelques contenus structur\xe9s ces fichiers auront de ce fait\ndes acc\xe8s r\xe9glement\xe9s. Pour le syst\xe8me les fichiers sont donc organis\xe9s en deux\ngrandes familles :"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"les fichiers standars"})," que sont par exemple les fichiers texte, les\nex\xe9cutables, etc. C'est \xe0 dire tout ce qui est manipul\xe9 et structur\xe9 par les\nutilisateurs."]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"les fichiers sp\xe9ciaux"})," p\xe9riph\xe9riques, m\xe9moire, et autre fichiers \"physique\"\nou logique. Ces fichiers ont une structure interne d\xe9finie (par les\nd\xe9veloppeurs du syst\xe8me) qui doit \xeatre respect\xe9 c'est pourquoi leur\nmanipulation n'est pas possible que par l'interm\xe9diaire du syst\xe8me"]}),"\n",(0,r.jsxs)(s.p,{children:["Les fichiers physiques sont dans le r\xe9pertoire ",(0,r.jsx)(s.code,{children:"/dev"}),"."]}),"\n",(0,r.jsx)(s.p,{children:"Cette distinction entre fichier ordinaire et sp\xe9ciaux et tout simplement le\nfait que le syst\xe8me est un utilisateur comme les autres des fichiers. Pour\ncertains fichier le syst\xe8me utilise une structure interne sp\xe9ciale (d'o\xf9 le\nnom) qui ne doit pas \xeatre modifi\xe9 sous peine de comportement ind\xe9fini. Pour se\nprot\xe9ger le syst\xe8me ne permet pas l'acc\xe8s direct aux informations c'est lui\nqui fait toutes les entr\xe9es sortie sur les fichiers sp\xe9ciaux de fa\xe7on a en\nassurer l'int\xe9grit\xe9. Ceci est ind\xe9pendant du syst\xe8me de droits d'acc\xe8s, la\nstructure du code du noyau ne permet pas d'autres acc\xe8s que les acc\xe8s\n\"sp\xe9ciaux\"."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"organisation-utilisateur-des-disques",children:"Organisation utilisateur des Disques"}),"\n",(0,r.jsx)(s.p,{children:"Comment permettre aux utilisateurs d'identifier les donn\xe9es sur les supports de\nmasse ? Le syst\xe8me le plus r\xe9pandu aujourd'hui est un syst\xe8me arborescent avec\ndes fichiers utilis\xe9s comme noeud de l'arbre qui permet de lister les fichiers\net les sous arbres qu'il co\xeftent, d'autres organisations \"plates\" existe ou l'on\norganise les fichiers en utilisant des types et des extensions de nom de fichier\npour \"organiser\". Les arborescences de fichiers et de catalogues, organis\xe9s\ncomme un graphe acyclique, apparaissent avec le projet MULTICS. Cette\norganisation logique du disque a les avantages suivants : Une racine, un acc\xe8s\nabsolu ais\xe9, une structure dynamique, une grande puissance d'expression et un\ngraphe acyclique."}),"\n",(0,r.jsx)(s.p,{children:"L'organisation est arborescente avec quelques connections suppl\xe9mentaires (liens\nmultiples sur un m\xeame fichier) qui en font un graphe. Mais ce graphe doit rester\nacyclique, pour les raisons suivantes."}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsx)(s.li,{children:"L'ensemble des algorithmes simples utilisables sur des graphes acycliques\ncomme le parcours, la v\xe9rification des fichiers libres, etc. Deviennent\nbeaucoup plus difficile \xe0 \xe9crire pour les graphes admettant des cycles"}),"\n",(0,r.jsx)(s.li,{children:"Des algorithmes de ramasse-miettes doivent \xeatre utilis\xe9s pour savoir si\ncertains objets sont utilis\xe9s ou non et pour r\xe9cup\xe9rer les inodes ou blocs\nperdus apr\xe8s un crash."}),"\n",(0,r.jsx)(s.li,{children:"Tous les algorithmes de d\xe9tection dans un graphe quelconque ont une\ncomplexit\xe9 beaucoup plus grande que ceux qui peuvent profiter de l'acyclit\xe9\ndu graphe"}),"\n",(0,r.jsx)(s.li,{children:"Sous unix nous comme assur\xe9s que le graphe est acyclique car il est interdit\nd'avoir plusieurs r\xe9f\xe9rences pour un m\xeame catalogue"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"les-inodes",children:"Les inodes"}),"\n",(0,r.jsx)(s.p,{children:"L'inode est le passage oblig\xe9 de tous les \xe9changes entre les syst\xe8mes de fichier\net la m\xe9moire. L'inode est la structure qui contient toutes les informations sur\nun fichier donn\xe9 \xe0 l'exception de sa r\xe9f\xe9rence dans l'arborescence (son nom),\nl'arborescence n'\xe9tant qu'un outil de r\xe9f\xe9renc\xe8rent des fichiers. Les\ninformations stock\xe9es dans une inode disque sont :"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"utilisateur propri\xe9taire"}),"\n",(0,r.jsx)(s.li,{children:"groupe propri\xe9taire"}),"\n",(0,r.jsx)(s.li,{children:"type de fichier"}),"\n",(0,r.jsx)(s.li,{children:"droit d'acc\xe8s"}),"\n",(0,r.jsx)(s.li,{children:"date de dernier acc\xe8s"}),"\n",(0,r.jsx)(s.li,{children:"date de derni\xe8re modification"}),"\n",(0,r.jsx)(s.li,{children:"date de derni\xe8re modification de l'inode"}),"\n",(0,r.jsx)(s.li,{children:"taille du fichier"}),"\n",(0,r.jsx)(s.li,{children:"adresses des blocs-disque contenant le fichier"}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"organisation-des-disques-system-v",children:"Organisation des disques System V"}),"\n",(0,r.jsx)(s.p,{children:"L'organisation disque d\xe9crite sur la figure ci dessous est la plus simple que\nl'on peut trouver de nos jours sous UNIX, il en exite d'autre o\xf9 l'on peut en\nparticulier placer un m\xeame disque logique sur plusieurs disques physiques,\ncertaines o\xf9 les blocs sont fragmentables etc"}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Boot bloc"})," utilis\xe9 au chargement du syst\xe8me"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Super Bloc"})," il contient toutes les informations g\xe9n\xe9rales sur le disque\nlogique"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Inode list"})," table des inodes"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"blocs"})," mes blocs de donn\xe9es chaines \xe0 la cr\xe9ation du disque (mkfs)"]}),"\n"]}),"\n",(0,r.jsx)("center",{children:(0,r.jsx)(s.p,{children:(0,r.jsx)(s.img,{src:i(38847).A+"",width:"542",height:"470"})})}),"\n",(0,r.jsx)(s.h2,{id:"adressage-des-blocs-dans-les-inodes",children:"Adressage des blocs dans les inodes"}),"\n",(0,r.jsx)(s.p,{children:"Le syst\xe8me d'adressage des blocs dans les inodes (syst\xe8me V) consiste en 13\nadresses de blocs. Les dix premi\xe8res adresses sont des adresses qui pointent\ndirectement sur les blocs de donn\xe9es du fichier. Les autres sont des adresses\nindirectes vers des blocs de donn\xe9es contenant des adresses. L'int\xe9r\xeat de cette\nrepr\xe9sentation est d'\xe9conomiser sur la taille des inodes tout en permettant un\nacc\xe8s rapide au petits fichiers (la majorit\xe9 des fichiers sont petits). Mais en\nlaissant la possibilit\xe9 de cr\xe9er de tr\xe8s gros fichiers."}),"\n",(0,r.jsx)(s.h2,{id:"allocation-des-inodes-dun-disque",children:"Allocation des inodes d'un disque"}),"\n",(0,r.jsx)(s.p,{children:"L\u2019allocation des inodes est r\xe9alis\xe9e en recherchant dans la zone des inodes du disque une inode\nlibre. Pour acc\xe9l\xe9rer cette recherche : un tampon d\u2019inodes libres est g\xe9r\xe9 dans le SuperBloc, de\nplus l\u2019indice de la premi\xe8re inode libre est gard\xe9 en r\xe9f\xe9rence dans le SuperBloc afin de red\xe9marrer\nla recherche qu\u2019\xe0 partir de la premi\xe8re inode r\xe9ellement libre."}),"\n",(0,r.jsx)(s.h2,{id:"allocation-des-blocs-disques",children:"Allocation des blocs disques"}),"\n",(0,r.jsx)(s.p,{children:"L\u2019algorithme utilis\xe9 pour g\xe9rer l\u2019allocation des inodes s\u2019appuie sur le fait que l\u2019on peut tester si\nune inode est libre ou non en regardant son contenu. Ceci n\u2019est plus vrai pour les blocs. La solution\nest de cha\u0131\u0302ner les blocs. Ce cha\u0131\u0302nage est r\xe9alis\xe9 par blocs d\u2019adresses pour acc\xe9l\xe9rer les acc\xe8s et\nprofiter au maximum du buffer cache. Il existe donc un bloc d\u2019adresses dans le super bloc qui sert\nde zone de travail pour l\u2019allocateur de blocs."})]})}function u(e={}){const{wrapper:s}={...(0,t.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},38847:(e,s,i)=>{i.d(s,{A:()=>n});const n=i.p+"assets/images/SYS4-596f99042420acbe54905e592d9f1b46.png"},28453:(e,s,i)=>{i.d(s,{R:()=>l,x:()=>d});var n=i(96540);const r={},t=n.createContext(r);function l(e){const s=n.useContext(t);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function d(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),n.createElement(t.Provider,{value:s},e.children)}}}]);