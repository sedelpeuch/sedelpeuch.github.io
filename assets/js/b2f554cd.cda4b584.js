"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[5894],{76042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2024/03/24/devops-roadmap","metadata":{"permalink":"/blog/2024/03/24/devops-roadmap","source":"@site/blog/2024-03-24-devops-roadmap.md","title":"DevOps Roadmap","description":"Pr\xe9sentation de ma roadmap DevOps personnelle 2024","date":"2024-03-24T00:00:00.000Z","formattedDate":"March 24, 2024","tags":[{"label":"DevOps","permalink":"/blog/tags/dev-ops"},{"label":"Roadmap","permalink":"/blog/tags/roadmap"}],"readingTime":6.335,"hasTruncateMarker":true,"authors":[{"name":"S\xe9bastien Delpeuch","url":"https://github.com/sedelpeuch","email":"jimarcey@gmail.com","imageURL":"https://github.com/sedelpeuch.png","key":"sedelpeuch"}],"frontMatter":{"title":"DevOps Roadmap","description":"Pr\xe9sentation de ma roadmap DevOps personnelle 2024","authors":"sedelpeuch","tags":["DevOps","Roadmap"]},"unlisted":false},"content":"Ing\xe9nieur en informatique au [CATIE](http://catie.fr/) sp\xe9cialis\xe9 en Robotique je suis amen\xe9 \xe0 travailler sur des projets de d\xe9veloppement logiciel et d\'int\xe9gration sur diff\xe9rentes plateformes. Intrigu\xe9 et passion\xe9 par l\'int\xe9gration et l\'automatisation des t\xe2ches, j\'ai d\xe9cid\xe9 d\'approfondir mes connaissances en DevOps.\\n\\n\x3c!--truncate--\x3e\\n\\nVoici un r\xe9sum\xe9 de ma roadmap DevOps personnelle pour 2024. Cette roadmap est bas\xe9e sur mes exp\xe9riences et mes objectifs personnels. Elle est sujette \xe0 des changements et des mises \xe0 jour r\xe9guli\xe8res. N\'h\xe9sitez pas \xe0 me contacter si vous avez des suggestions ou des commentaires.\\n\\n# DevOps Roadmap\\n\\nimport IconTitle from \'@site/src/components/IconTitle\';\\n\\n![DevOps](./img/devops.png)\\n\\nL\xe9gende :\\n\\n- [ ] \xc0 apprendre\\n- [x] En cours d\'apprentissage\\n- [x] ~~Ma\xeetris\xe9~~\\n\\n## <IconTitle logo=\\"mdi:code-braces\\" name=\\"Concepts du d\xe9veloppement logiciel\\"/>\\n\\nEn tant qu\'ing\xe9nieur DevOps, vous ne programmerez pas l\'application, mais comme vous travaillez en \xe9troite collaboration avec l\'\xe9quipe de d\xe9veloppement pour am\xe9liorer et automatiser les t\xe2ches pour eux, vous devez comprendre les concepts de :\\n\\n- [x] Collaboration des d\xe9veloppeurs (Agile, Jira)\\n- [x] ~~Utilisation de Git~~\\n- [x] Configuration des applications (Outils de build)\\n- [x] ~~Compr\xe9hension du cycle de vie du d\xe9veloppement logiciel~~\\n- [x] Tests automatis\xe9s\\n\\n## <IconTitle logo=\\"skill-icons:linux-light\\" name=\\"OS & Linux\\"/>\\n\\nEn tant qu\'ing\xe9nieur DevOps, vous \xeates responsable de la pr\xe9paration et de la maintenance de l\'infrastructure (serveurs) sur laquelle l\'application est d\xe9ploy\xe9e. Vous devez donc conna\xeetre les bases de l\'administration d\'un serveur et de l\'installation de diff\xe9rents outils sur celui-ci. Voici les concepts de base des syst\xe8mes d\'exploitation que vous devez comprendre :\\n\\n- [x] ~~Commandes Shell~~\\n- [x] ~~Syst\xe8me de fichiers Linux & Permissions~~\\n- [x] ~~Gestion des cl\xe9s SSH~~\\n- [x] Notions de base de la mise en r\xe9seau et de la s\xe9curit\xe9\\n- [x] Configuration des pare-feu pour s\xe9curiser l\'acc\xe8s\\n- [x] ~~Comprendre comment fonctionnent les adresses IP, les ports et le DNS~~\\n- [ ] \xc9quilibreurs de charge\\n- [x] Proxies\\n- [x] ~~HTTP/HTTPS~~\\n- [x] Virtualisation\\n\\n## <IconTitle logo=\\"skill-icons:docker\\" name=\\"Conten\xe9risation - Docker\\"/>\\n\\nLes conteneurs sont devenus le nouveau standard de l\'emballage logiciel, vous ex\xe9cuterez probablement votre application en tant que conteneur. Cela signifie que vous devez g\xe9n\xe9ralement comprendre :\\n\\n- [ ] Concepts de virtualisation\\n- [x] ~~Concepts de conteneurisation~~\\n- [x] Comment g\xe9rer les applications conteneuris\xe9es sur un serveur.\\n\\nDocker est de loin la technologie de conteneur la plus populaire ! Voici quelques points que vous devriez conna\xeetre :\\n\\n- [x] ~~Ex\xe9cuter des conteneurs~~\\n- [x] ~~Inspecter les conteneurs actifs~~\\n- [x] ~~R\xe9seau Docker~~\\n- [x] ~~Persister les donn\xe9es avec les volumes Docker~~\\n- [x] ~~Dockeriser les applications en utilisant Dockerfiles~~\\n- [x] ~~Ex\xe9cuter plusieurs conteneurs en utilisant Docker-Compose~~\\n- [x] ~~Travailler avec le d\xe9p\xf4t Docker~~\\n\\nLes conteneurs et les machines virtuelles ont des avantages similaires en termes d\'isolation et d\'allocation des ressources, mais fonctionnent diff\xe9remment. Les VMs virtualisent tout le syst\xe8me d\'exploitation. Les conteneurs virtualisent uniquement le niveau d\'application du syst\xe8me d\'exploitation. Par cons\xe9quent, les conteneurs sont plus l\xe9gers et plus rapides.\\n\\n## <IconTitle logo=\\"skill-icons:githubactions-light\\" name=\\"CI/CD Pipeline\\"/>\\n\\nCI/CD Pipelines\\n\\nCI/CD est en quelque sorte le c\u0153ur de DevOps. En DevOps, toutes les modifications de code, comme les nouvelles fonctionnalit\xe9s ou les corrections de bugs, doivent \xeatre int\xe9gr\xe9es dans l\'application existante et d\xe9ploy\xe9es pour l\'utilisateur final de mani\xe8re continue et automatis\xe9e. D\'o\xf9 le terme :\\nInt\xe9gration Continue et D\xe9ploiement Continu (CI/CD)\\n\\nComp\xe9tences que vous devez apprendre ici :\\n\\n- [x] ~~Configuration du serveur CI/CD~~\\n- [x] ~~Int\xe9gration du d\xe9p\xf4t de code pour d\xe9clencher le pipeline automatiquement~~\\n- [x] Outils de construction et de gestion de packages pour ex\xe9cuter les tests et emballer l\'application\\n- [x] Configuration des d\xe9p\xf4ts d\'artefacts (comme Nexus) et int\xe9gration avec le pipeline\\n\\n## <IconTitle logo=\\"skill-icons:aws-light\\" name=\\"Apprendre un fournisseur de Cloud\\"/>\\n\\nDe nos jours, de nombreuses entreprises utilisent une infrastructure virtuelle sur le cloud, au lieu de g\xe9rer leur propre infrastructure. Ce sont des plateformes Infrastructure as a Service (IaaS), qui offrent une gamme de services suppl\xe9mentaires, comme la sauvegarde, la s\xe9curit\xe9, l\'\xe9quilibrage de charge, etc.\\n\\nAWS est la plateforme IaaS la plus puissante et la plus largement utilis\xe9e, mais aussi une des plus difficiles. D\'autres populaires : Microsoft Azure, Google Cloud.\\n\\nCes services sont sp\xe9cifiques \xe0 la plateforme. Vous devez donc apprendre les services de cette plateforme sp\xe9cifique et apprendre \xe0 g\xe9rer toute l\'infrastructure de d\xe9ploiement sur celle-ci. Par exemple, pour AWS, vous devez conna\xeetre les bases de :\\n\\n- [ ] Service IAM - gestion des utilisateurs et des permissions\\n- [ ] Service VPC - votre r\xe9seau priv\xe9\\n- [ ] Service EC2 - serveurs virtuels\\n\\n## <IconTitle logo=\\"skill-icons:kubernetes\\" name=\\"Orchestration de conteneurs - Kubernetes & Docker Swarm\\"/>\\n\\nComme les conteneurs sont populaires et faciles \xe0 utiliser, de nombreuses entreprises ex\xe9cutent des centaines ou des milliers de conteneurs sur plusieurs serveurs. Cela signifie que ces conteneurs doivent \xeatre g\xe9r\xe9s d\'une mani\xe8re ou d\'une autre.\\n\\n\xc0 cette fin, il existe des outils d\'orchestration de conteneurs. Kubernetes (\xe9galement connu sous le nom de K8s) est l\'outil d\'orchestration de conteneurs le plus populaire.\\n\\nVous devez donc apprendre :\\n\\n- [x] ~~Apprendre les composants de base comme, Deployment, Service, ConfigMap, Secret, StatefulSet,~~ Ingress\\n- [x] CLI Kubernetes (Kubectl)\\n- [x] Persistance des donn\xe9es avec les volumes K8s\\n- [x] Namespaces\\n- [ ] Docker Swarm\\n\\n## <IconTitle logo=\\"skill-icons:prometheus\\" name=\\"Monitoring & Observabilit\xe9\\"/>\\n\\nUne fois que le logiciel est en production, il est important de le surveiller pour suivre les performances, d\xe9couvrir les probl\xe8mes dans votre infrastructure et l\'application. Donc, l\'une de vos responsabilit\xe9s en tant qu\'ing\xe9nieur DevOps est de :\\n\\n- [ ] Prometheus : Un outil de surveillance et d\'alerte populaire\\n- [x] Grafana : Outil d\'analyse et de visualisation interactive\\n- [ ] ELK Stack : Une pile de gestion de logs populaire\\n\\n## <IconTitle logo=\\"skill-icons:terraform-light\\" name=\\"Infrastructure as Code\\"/>\\n\\nCr\xe9er et maintenir manuellement une infrastructure est chronophage et sujet \xe0 erreurs. Surtout lorsque vous devez r\xe9pliquer l\'infrastructure, par exemple pour un environnement de d\xe9veloppement, de test et de production.\\n\\nEn DevOps, nous voulons automatiser autant que possible et c\'est l\xe0 qu\'intervient l\'Infrastructure as Code.\\n\\n- [ ] Terraform est l\'outil de provisionnement d\'infrastructure le plus populaire\\n- [ ] Ansible est l\'outil de gestion de configuration le plus populaire\\n\\n## <IconTitle logo=\\"skill-icons:python-light\\" name=\\"Langages de script - Python\\"/>\\n\\nEn travaillant \xe9troitement avec les d\xe9veloppeurs et les administrateurs syst\xe8me pour automatiser les t\xe2ches de d\xe9veloppement et d\'op\xe9rations, vous aurez besoin d\'\xe9crire des scripts et de petites applications. Pour cela, vous aurez besoin de comp\xe9tences en scripting ou en programmation de base. Python est un langage largement utilis\xe9, facile \xe0 apprendre et utilis\xe9 pour de nombreux cas d\'utilisation diff\xe9rents, en particulier en DevOps.\\n\\n- [x] ~~Apprendre les bases de Python~~\\n- [x] ~~\xc9crire des scripts utilitaires, par exemple pour vider le cache, d\xe9marrer les builds et les d\xe9ploiements~~\\n- [x] ~~Comprendre les concepts de programmation de base~~\\n\\n<IconTitle logo=\\"skill-icons:git\\" name=\\"Contr\xf4le de version - Git\\"/>\\n\\nToute la logique d\'automatisation est \xe9crite sous forme de code. Tout comme le code d\'application, le code d\'automatisation doit \xe9galement \xeatre g\xe9r\xe9 et h\xe9berg\xe9 sur un outil de contr\xf4le de version, comme Git. Git est l\'outil de contr\xf4le de version le plus populaire et le plus largement utilis\xe9. Vos fichiers sont stock\xe9s de mani\xe8re centralis\xe9e dans un d\xe9p\xf4t Git distant sur le web. Les d\xe9p\xf4ts Git les plus populaires sont GitHub et GitLab. Git est un outil CLI, que vous installez localement. Il permet de suivre les modifications du code source et facilite la collaboration sur le code.\\n\\n- [x] ~~Apprendre \xe0 utiliser un d\xe9p\xf4t Git~~\\n- [x] ~~Ma\xeetriser les commandes de base de Git, comme git clone, git branch, git pull/push, git merge, etc.~~\\n- [x] ~~Apprendre \xe0 collaborer sur un projet, comme cr\xe9er des pull requests, faire des revues de code, g\xe9rer les branches~~"}]}')}}]);