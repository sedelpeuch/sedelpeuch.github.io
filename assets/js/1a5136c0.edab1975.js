"use strict";(self.webpackChunksedelpeuch_net=self.webpackChunksedelpeuch_net||[]).push([[4405],{16813:(e,s,n)=>{n.d(s,{A:()=>r});const r=n.p+"assets/images/SYS6-8b9981a4611ad2e200486426eacbffc0.png"},19095:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>l,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"enseirb/s7/prog_sys/6","title":"Les processus","description":"Introduction aux processus","source":"@site/docs/enseirb/s7/prog_sys/6.md","sourceDirName":"enseirb/s7/prog_sys","slug":"/enseirb/s7/prog_sys/6","permalink":"/docs/enseirb/s7/prog_sys/6","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Les processus"},"sidebar":"tutorialSidebar","previous":{"title":"Appels syst\xe8me du Syst\xe8me de Gestion de Fichier","permalink":"/docs/enseirb/s7/prog_sys/5"},"next":{"title":"La m\xe9moire","permalink":"/docs/enseirb/s7/prog_sys/7"}}');var t=n(74848),i=n(28453);const o={title:"Les processus"},u=void 0,l={},c=[{value:"Introduction aux processus",id:"introduction-aux-processus",level:2},{value:"Cr\xe9ation d&#39;un processus - <code>fork()</code>",id:"cr\xe9ation-dun-processus---fork",level:3},{value:"Format d&#39;un fichier ex\xe9cutable",id:"format-dun-fichier-ex\xe9cutable",level:2},{value:"Chargement / changement d&#39;un ex\xe9cutable",id:"chargement--changement-dun-ex\xe9cutable",level:2},{value:"<code>zone u</code> et table des processus",id:"zone-u-et-table-des-processus",level:2},{value:"<code>fork</code> et <code>exec</code>",id:"fork-et-exec",level:2},{value:"Le contexte d&#39;un processus",id:"le-contexte-dun-processus",level:2},{value:"Commutation de mot d&#39;\xe9tat et interruptions",id:"commutation-de-mot-d\xe9tat-et-interruptions",level:2},{value:"Les interruptions",id:"les-interruptions",level:2},{value:"Le probl\xe8me des cascades d&#39;interruptions",id:"le-probl\xe8me-des-cascades-dinterruptions",level:2},{value:"Acc\xe8s aux structures <code>proc</code> et <code>user</code> du processus courant",id:"acc\xe8s-aux-structures-proc-et-user-du-processus-courant",level:2}];function a(e){const s={code:"code",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"introduction-aux-processus",children:"Introduction aux processus"}),"\n",(0,t.jsx)(s.p,{children:"Un processus est un ensemble d'octets (en langage machine) en cours d'ex\xe9cution,\nen d'autres termes, c'est l'ex\xe9cution d'un programme. Un processus UNIX se\nd\xe9compose en :"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"un espace d'adressage (visible par l'utilisateur / programmeur)"}),"\n",(0,t.jsxs)(s.li,{children:["Le bloc de contr\xf4le du processus (BCP) lui-m\xeame d\xe9compos\xe9 en :","\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["une entr\xe9e dans la table des processus du noyau ",(0,t.jsx)(s.code,{children:"struc proc"})," d\xe9finie dans\n",(0,t.jsx)(s.code,{children:"<sys/proc.h>"})]}),"\n",(0,t.jsxs)(s.li,{children:["une structure ",(0,t.jsx)(s.code,{children:"struct user"})," appel\xe9e ",(0,t.jsx)(s.code,{children:"zone u"})," d\xe9finie dans ",(0,t.jsx)(s.code,{children:"<sys/user.h>"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Le processus sous UNIX apportent :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"La multiplicit\xe9 des ex\xe9cutions, plusieurs processus peuvent \xeatre l'ex\xe9cution\nd'un m\xeame programme"}),"\n",(0,t.jsx)(s.li,{children:"La protection des ex\xe9cutions, un processus ne peut ex\xe9cuter que ses\ninstructions propres et ce de fa\xe7on s\xe9quentielle; il ne peut pas ex\xe9cuter des\ninstructions appartenant \xe0 un autre processus. Les processus sous UNIX\ncommuniquent entre eux et avec le reste du monde gr\xe2ce aux appels syst\xe8me."}),"\n"]}),"\n",(0,t.jsxs)(s.h3,{id:"cr\xe9ation-dun-processus---fork",children:["Cr\xe9ation d'un processus - ",(0,t.jsx)(s.code,{children:"fork()"})]}),"\n",(0,t.jsxs)(s.p,{children:["Sous UNIX la cr\xe9ation de processus est r\xe9alis\xe9e par l'appel syst\xe8me ",(0,t.jsx)(s.code,{children:"int fork(void);"}),". tous les processus sauf le processus d'identification 0, sont\ncr\xe9\xe9s par un appel \xe0 fork. Le processus qui appelle le ",(0,t.jsx)(s.code,{children:"fork"})," est appel\xe9\nprocessus p\xe8re. Le nouveau processus est appel\xe9 processus fils. Tout processus a\nun seul processus p\xe8re. Tout processus peut avoir z\xe9ro ou plusieurs processus\nfils. Chaque processus est identifi\xe9 par un num\xe9ro unique, son ",(0,t.jsx)(s.strong,{children:"PID"}),"."]}),"\n",(0,t.jsx)("center",{children:(0,t.jsx)(s.p,{children:(0,t.jsx)(s.img,{src:n(16813).A+"",width:"458",height:"326"})})}),"\n",(0,t.jsxs)(s.p,{children:['Le processus de PID 0 est cr\xe9\xe9 "manuellement" au d\xe9marrage de la machine, ce\nprocessus a toujours un r\xf4le sp\xe9cial pour le syst\xe8me, de plus pour le bon\nfonctionnement des programmes utilisant ',(0,t.jsx)(s.code,{children:"fork()"})," il faut que le PID z\xe9ro reste\ntoujours utilis\xe9. Le processus z\xe9ro cr\xe9e, gr\xe2ce \xe0 un appel de ",(0,t.jsx)(s.code,{children:"fork"}),", le\nprocessus init de PID 1."]}),"\n",(0,t.jsxs)(s.p,{children:["Le processus de PID 1 de nom ",(0,t.jsx)(s.code,{children:"init"})," est l'anc\xeatre de tous les autres processus\n(le processus 0 ne r\xe9alisant plus de ",(0,t.jsx)(s.code,{children:"fork()"}),"), c'est lui qui accueille tous les\nprocessus orphelins de p\xe8re (ceci a fin de collecter les informations \xe0 la mort\nde chaque processus)."]}),"\n",(0,t.jsx)(s.h2,{id:"format-dun-fichier-ex\xe9cutable",children:"Format d'un fichier ex\xe9cutable"}),"\n",(0,t.jsx)(s.p,{children:"Les compilateurs nous permettent de cr\xe9er des fichiers ex\xe9cutables. Ces fichiers\nont le format suivant qui permet au noyau de les transformer en processus :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Une en-t\xeate qui d\xe9crit l'ensemble du fichier, ses attributs et sa carte des\nsections"}),"\n",(0,t.jsx)(s.li,{children:"La taille \xe0 allouer pour les variables non initialis\xe9es"}),"\n",(0,t.jsx)(s.li,{children:"Une section TEXT qui contient le code (en langage machine)"}),"\n",(0,t.jsx)(s.li,{children:"Une section donn\xe9es (DATA) cod\xe9e en langage machine qui contient les donn\xe9es\ninitialis\xe9es"}),"\n",(0,t.jsx)(s.li,{children:"Eventuellement d'autres sections : Table des symboles pour le d\xe9bugger,\nImages, ICONS, Table des cha\xeenes, etc"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"chargement--changement-dun-ex\xe9cutable",children:"Chargement / changement d'un ex\xe9cutable"}),"\n",(0,t.jsxs)(s.p,{children:["L'appel syst\xe8me ",(0,t.jsx)(s.code,{children:"execve"})," change l'ex\xe9cutable du processus courant en chargeant\nun nouvel ex\xe9cutable. Les r\xe9gions associ\xe9e au processus sont pr\xe9alablement\nlib\xe9r\xe9es : ",(0,t.jsx)(s.code,{children:"int execve(...);"})]}),"\n",(0,t.jsx)(s.p,{children:"Pour chaque section de l'ex\xe9cutable une r\xe9gion en m\xe9moire est allou\xe9e. Soit au\nmoins les r\xe9gions :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"le code"}),"\n",(0,t.jsx)(s.li,{children:"les donn\xe9es initialis\xe9es"}),"\n",(0,t.jsx)(s.li,{children:"des piles"}),"\n",(0,t.jsx)(s.li,{children:"du tas"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["La r\xe9gion de la pile : C'est une pile de structure de pile qui sont empil\xe9es et\nd\xe9pil\xe9es lors de l'appel ou le retour de fonction. Le pointeur de pile, un des\nregistres de l'unit\xe9 centrale, indique la profondeur courante de la pile. Un\nprocessus UNIX pouvant s'ex\xe9cuter en deux modes (noyau, utilisateur), une pile\npriv\xe9e sera utilis\xe9e dans chaque mode. La pile noyau sera vide quand le\nprocessus est en mode utilisateur. Le tas est une zone o\xf9 est r\xe9alis\xe9e\nl'allocation dynamique avec les fonctions ",(0,t.jsx)(s.code,{children:"Xalloc()"}),"."]}),"\n",(0,t.jsxs)(s.h2,{id:"zone-u-et-table-des-processus",children:[(0,t.jsx)(s.code,{children:"zone u"})," et table des processus"]}),"\n",(0,t.jsxs)(s.p,{children:["Tous les processus sont associ\xe9s \xe0 une entr\xe9e dans la table des processus qui\nest interne au noyau. De plus, le noyau alloue pour chaque processus une\nstructure appel\xe9e ",(0,t.jsx)(s.code,{children:"zone u"}),", qui contient des donn\xe9es priv\xe9es du processus,\nuniquement manipulables par le noyau. La table des processus nous permet\nd'acc\xe9der \xe0 la table des r\xe9gions par processus qui permet d'acc\xe9der \xe0 la table\ndes r\xe9gions. Ce double niveau d'indirection permet de faire partager des\nr\xe9gions. Dans l'organisation avec une m\xe9moire virtuelle, la table des r\xe9gions\nest mat\xe9rialis\xe9e logiquement dans la table de pages. Les structures de r\xe9gions\nde la table des r\xe9gions contiennent des informations sur le type, les droits\nd'acc\xe8s et la localisation (adresses en m\xe9moire ou adresses sur disque) de la\nr\xe9gion. Seule la ",(0,t.jsx)(s.code,{children:"zone u"})," du processus courant est manipulable par le noyau, les\nautres sont ",(0,t.jsx)(s.code,{children:"inaccessibles"}),". L'adresse de la zone ",(0,t.jsx)(s.code,{children:"u"})," est plac\xe9e dans le mot\nd'\xe9tat du processus."]}),"\n",(0,t.jsxs)(s.h2,{id:"fork-et-exec",children:[(0,t.jsx)(s.code,{children:"fork"})," et ",(0,t.jsx)(s.code,{children:"exec"})]}),"\n",(0,t.jsxs)(s.p,{children:["Quand un processus r\xe9alise un ",(0,t.jsx)(s.code,{children:"fork"}),", le contenu de l'entr\xe9e de la table des\nr\xe9gions est dupliqu\xe9, chaque r\xe9gion est ensuite, en fonction de son type,\npartag\xe9e ou copi\xe9e. Quand un processus r\xe9alise un ",(0,t.jsx)(s.code,{children:"exec"}),", il y a lib\xe9ration des\nr\xe9gions et r\xe9allocation de nouvelles r\xe9gions en fonction des valeurs d\xe9finies\ndans le nouvel ex\xe9cutable"]}),"\n",(0,t.jsx)(s.h2,{id:"le-contexte-dun-processus",children:"Le contexte d'un processus"}),"\n",(0,t.jsx)(s.p,{children:"Le contexte d'un processus est l'ensemble des donn\xe9es qui permettent de\nreprendre l'ex\xe9cution d'un processus qui a \xe9t\xe9 interrompu. Le contexte d'un\nprocessus est l'ensemble de :"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"son \xe9tat"}),"\n",(0,t.jsx)(s.li,{children:"son mot d'\xe9tat"}),"\n",(0,t.jsx)(s.li,{children:"les valeurs des variables globales statiques ou dynamiques"}),"\n",(0,t.jsx)(s.li,{children:"son entr\xe9e dans la table des processus"}),"\n",(0,t.jsx)(s.li,{children:"sa zone u"}),"\n",(0,t.jsx)(s.li,{children:"les piles user et system"}),"\n",(0,t.jsx)(s.li,{children:"les zones de code et de donn\xe9es"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Le noyau et ses variables ne font partie du contexte d'aucun processus !\nL'ex\xe9cution d'un processus se fait dans son contexte. Quand il y a un changement\nde processus courant, il y a r\xe9alisation d'une commutation de mode d'\xe9tat et\nd'un changement de contexte. Le noyau s'ex\xe9cute alors dans le nouveau contexte."}),"\n",(0,t.jsx)(s.h2,{id:"commutation-de-mot-d\xe9tat-et-interruptions",children:"Commutation de mot d'\xe9tat et interruptions"}),"\n",(0,t.jsx)(s.p,{children:"Ces fonctions de tr\xe8s bas niveau sont fondamentales pour pouvoir programmer un\nsyst\xe8me d'exploitation. Pour \xeatre ex\xe9cut\xe9 et donner naissance \xe0 un processus, un\nprogramme et ses donn\xe9es doivent \xeatre charg\xe9s en m\xe9moire centrale. Les\ninstructions du programme sont transf\xe9r\xe9es une \xe0 une de la m\xe9moire centrale sur\nl'unit\xe9 centrale o\xf9 elles sont ex\xe9cut\xe9es. L'unit\xe9 centrale comprend des circuits\nlogiques et arithm\xe9tiques qui effectuent les instructions mais aussi des m\xe9moire\nappel\xe9es registres. Certains de ces registres sont sp\xe9cialis\xe9s directement par\nles constructeurs de l'unit\xe9 centrale, d'autre le sont par les programmeur du\nnoyau. Quelques registres sp\xe9cialis\xe9s :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"L'accumulateur"})," qui re\xe7oit le r\xe9sultat d'une instruction, sur les machines\n\xe0 registres multiples, le jeu d'instructions permet souvent d'utiliser\nn'importe lequel des registres comme accumulateur"]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"le registre d'instruction"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"le compteur ordinal"}),", ce compteur change au cours de la r\xe9alisation d'une\ninstruction pour pointer sur la prochaine instruction \xe0 ex\xe9cuter, la majorit\xe9\ndes instructions ne font qu'incr\xe9menter ce compteur, les instructions de\nbranchement r\xe9alisent des op\xe9rations plus complexes sur ce compteur :\naffectation, incr\xe9mentation ou d\xe9cr\xe9mentation plus importantes"]}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"le registre d'adresse"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"les registres de donn\xe9es"})," qui sont utilis\xe9s pour lire ou \xe9crire une donn\xe9e\n\xe0 une adresse sp\xe9cifi\xe9e en m\xe9moire"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"les registres d'\xe9tat"})," du processeur"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"les registres d'\xe9tat du processus"})," droits, adresses, priorit\xe9s etc"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Ce registres forment le contexte d'unit\xe9 centrale d'un processus. A tout moment,\nun processus est caract\xe9ris\xe9 par ces deux contextes : le contexte d'unit\xe9\ncentrale qui est compos\xe9 des m\xeames donn\xe9es pour tous les processus et le\ncontexte qui d\xe9pend du code du programme ex\xe9cut\xe9. Pour pouvoir ex\xe9cuter un\nnouveau processus, il faut pouvoir sauvegarder le contexte d'unit\xe9 centrale du\nprocessus courant (mot d'\xe9tat), puis charger le nouveau mot d'\xe9tat du processus\n\xe0 ex\xe9cuter. Cette op\xe9ration d\xe9licate r\xe9alis\xe9e de fa\xe7on mat\xe9rielle est appel\xe9e\ncommutation de mot d'\xe9tat. Elle doit se faire de fa\xe7on non interruptible ! Cette\n\"Super instruction\" utilise 2 adresses qui sont respectivement : l'adresse de\nsauvegarde du mot d'\xe9tat et l'adresse de lecture du nouveau mot d'\xe9tat. Le\ncompteur ordinal faisant partie du mot d'\xe9tat, ce changement provoque\nl'ex\xe9cution dans le nouveau processus. C'est le nouveau processus qui devra\nr\xe9aliser la sauvegarde du contexte global. En g\xe9n\xe9ral c'est le noyau qui r\xe9alise\ncette sauvegarde, le noyau n'ayant pas un contexte du m\xeame type. Le processus\ninterrompu pourra ainsi reprendre exactement o\xf9 il avait abandonn\xe9s."}),"\n",(0,t.jsx)(s.h2,{id:"les-interruptions",children:"Les interruptions"}),"\n",(0,t.jsx)(s.p,{children:"Une interruption est une commutation de mot d'\xe9tat provoqu\xe9e par un signal\nproduit par le mat\xe9riel. Ce signal \xe9tant la cons\xe9quence d'un \xe9v\xe9nement ext\xe9rieur\nou int\xe9rieur, il modifie l'\xe9tat d'un indicateur qui est r\xe9guli\xe8rement test\xe9 par\nl'unit\xe9 centrale. Une fois que le signal est d\xe9tect\xe9, il faut d\xe9terminer la\ncause de l'interruption. Pour cela on utilise un indicateur, pour les\ndiff\xe9rentes causes, on parle alors du vecteur d'interruptions. Trois grands\ntypes d'interruptions :"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"externes"})," (ind\xe9pendantes du processus) interventions de l'op\xe9rateur,\npannes, etc"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"d\xe9routements"})," erreur interne du processeur, d\xe9bordement, division par z\xe9ro,\npage fault etc"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"appels syst\xe8mes"})," demande d'entr\xe9e-sortie par exemple."]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Suivant les machines et les syst\xe8mes un nombre de variable de niveaux\nd'interruption est utilis\xe9. Ces diff\xe9rentes interruptions ne r\xe9alisent pas\nn\xe9cessairement un changement de contexte complet du processus courant. Il est\npossible que plusieurs niveaux d'interruption soient positionn\xe9es quand le\nsyst\xe8me les consulte. C'est le niveau des diff\xe9rentes interruptions qui va\npermettre au syst\xe8me de s\xe9lectionner l'interruption \xe0 traiter en priorit\xe9.\nL'horloge est l'interruption la plus prioritaire sur un syst\xe8me Unix."}),"\n",(0,t.jsx)(s.h2,{id:"le-probl\xe8me-des-cascades-dinterruptions",children:"Le probl\xe8me des cascades d'interruptions"}),"\n",(0,t.jsxs)(s.p,{children:["Si pendant le traitement d'une interruption, une autre interruption se produit,\net qeu ceci se r\xe9p\xe8te pendant le traitement de la nouvelle interruption, le\nsyst\xe8me ne fait plus progresser les processus ni les interruption en cours de\ntraitement. Il est donc n\xe9cessaire de pouvoir retarder ou annuler la prise en\ncompte d'un ou plusieurs signaux d'interruption. C'est le r\xf4le des deux\nm\xe9canismes de ",(0,t.jsx)(s.strong,{children:"masquage"})," et de ",(0,t.jsx)(s.strong,{children:"d\xe9sarmement"})," d'un niveau d'interruption.\nMasquer, c'est ignorer temporairement un niveau d'interruption. Si ce masquage\nest fait dans le mot d'\xe9tat d'un traitement d'interruption, \xe0 la nouvelle\ncommutation d'\xe9tat, le masquage dispara\xeet; les interruptions peuvent de nouveau\n\xeatre prises en compte. D\xe9sarmer, c'est rendre le positionnement de\nl'interruption caduque."]}),"\n",(0,t.jsxs)(s.h2,{id:"acc\xe8s-aux-structures-proc-et-user-du-processus-courant",children:["Acc\xe8s aux structures ",(0,t.jsx)(s.code,{children:"proc"})," et ",(0,t.jsx)(s.code,{children:"user"})," du processus courant"]}),"\n",(0,t.jsxs)(s.p,{children:["Les informations de la table des processus peuvent \xeatre lues gr\xe2ce \xe0 la commande\nshell ",(0,t.jsx)(s.code,{children:"ps"}),". Ou par des appels syst\xe8me. Par contre, les informations contenues\ndans la zone ",(0,t.jsx)(s.code,{children:"u"})," ne sont pas accessibles que par une r\xe9ponse du processus\nlui-m\xeame (en programmation objet, on dit que ce sont des variables d'instances\npriv\xe9es), d'o\xf9 les appels syst\xe8mes suivants : ",(0,t.jsx)(s.code,{children:"times, chroot, chdir, fchdir, getuid, getgid ..."})]})]})}function d(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>u});var r=n(96540);const t={},i=r.createContext(t);function o(e){const s=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function u(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),r.createElement(i.Provider,{value:s},e.children)}}}]);